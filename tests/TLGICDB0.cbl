       PROCESS NODLL,NODYNAM,TEST(NOSEP),NOCICS,NOSQL,PGMN(LU),NOSEQ
      *+---------------------------------------------------------------+
      *| TLGICDB0                                                      |
      *| UNIT TEST FOR Z/OS: TEST CASE PROGRAM                         |
      *| TEST CASE VERSION: 202                                        |
      *| DATE GENERATED: 04/09/2025 11:42                              |
      *| ID: e169feb0-086e-49af-afcd-91114844336d                      |
      *+---------------------------------------------------------------+
      *+---------------------------------------------------------------+
      *| UNIT TEST FOR Z/OS: TEST_TEST1                                |
      *|     FOR TEST TEST1                                            |
      *| TEST CASE VERSION: 202                                        |
      *+---------------------------------------------------------------+
       IDENTIFICATION DIVISION.
       PROGRAM-ID. 'TEST_TEST1'.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 PROGRAM-NAME   PIC X(8)  VALUE 'LGICDB01'.
       01 AZ-CSECT       PIC X(72) VALUE SPACES.
       01 BZ-ASSERT.
         03 MESSAGE-LEN PIC S9(4) COMP-4 VALUE 24.
         03 MESSAGE-TXT PIC X(254) VALUE 'HELLO FROM TEST CALLBACK'.
       01  BZ-P1 PIC S9(9) COMP-4 VALUE 4.
       01  BZ-P2 PIC S9(9) COMP-4 VALUE 2001.
       01  BZ-P3 PIC X(3) VALUE 'AZU'.
       01 BZ-TRACE.
         03 TRACE-LEN       PIC S9(4) COMP-4 VALUE 5.
         03 TRACE-TXT       PIC X(254) VALUE 'TRACE'.
       01 BZUASSRT          PIC X(8) VALUE 'BZUASSRT'.
       01 BZUTRACE          PIC X(8) VALUE 'BZUTRACE'.
       01 BZUGETEP          PIC X(8) VALUE 'BZUGETEP'.
       01 AZ-EP-PTR         USAGE IS POINTER.
       01 AZ-TRACE-PTR      POINTER.
       01 ASSERT-ST.
         03 ASSERT-RC PIC 9(9) BINARY VALUE 4.
         03 ASSERT-TEXT PIC 9(4) BINARY VALUE 0.
       01 AZ-TEST-NAME-LEN       PIC S9(9) COMP-5.
       01 AZ-RC-WORK             PIC S9(4) USAGE BINARY.
       1 AZ-TEST-EXPECTED-DATA-VALUE.
          3 AZU00000000.
            5 PIC X(6) DISPLAY VALUE '01ICUS'.
          3 AZU00000001.
            5 PIC X(6) DISPLAY VALUE 'Andrew'.
            5 PIC X(4) DISPLAY VALUE SPACES.
          3 AZU00000002.
            5 PIC X(5) DISPLAY VALUE 'Pandy'.
            5 PIC X(15) DISPLAY VALUE SPACES.
          3 AZU00000003.
            5 PIC X(10) DISPLAY VALUE '1950-07-11'.
          3 AZU00000004.
            5 PIC X(20) DISPLAY VALUE SPACES.
          3 AZU00000005.
            5 PIC X(2) DISPLAY VALUE '34'.
            5 PIC X(2) DISPLAY VALUE SPACES.
          3 AZU00000006.
            5 PIC X(7) DISPLAY VALUE 'PI101OO'.
            5 PIC X(1) DISPLAY VALUE SPACES.
          3 AZU00000007.
            5 PIC X(12) DISPLAY VALUE '07799 123456'.
            5 PIC X(8) DISPLAY VALUE SPACES.
          3 AZU00000008.
            5 PIC X(12) DISPLAY VALUE '01962 811234'.
            5 PIC X(8) DISPLAY VALUE SPACES.
          3 AZU00000009.
            5 PIC X(20) DISPLAY VALUE 'A.Pandy@beebhouse.co'.
            5 PIC X(1) DISPLAY VALUE 'm'.
            5 PIC X(79) DISPLAY VALUE SPACES.
          3 AZU0000000A.
            5 PIC X(32267) DISPLAY VALUE SPACES.
       01 AZ-COMPARE.
         03 AZ-COMPARE-ITEM-NAME-PTR  POINTER.
         03 AZ-COMPARE-ITEM-NAME-LEN  PIC S9(9) COMP-5.
         03 AZ-COMPARE-ITEM-VALUE-PTR POINTER.
         03 AZ-COMPARE-ITEM-VALUE-LEN PIC S9(9) COMP-5.
         03 AZ-COMPARE-ITEM-EXP-VALUE-PTR POINTER.
         03 AZ-COMPARE-ITEM-EXP-VALUE-LEN PIC S9(9) COMP-5.
         03 AZ-ITEM-NAME-S            PIC S9(8) COMP.
         03 AZ-ITEM-NAME-LEN          PIC S9(8) COMP.
       LOCAL-STORAGE SECTION.
       1 AZ-COMPARE-ITEM-NAMES.
         3 AZU0000000B.
            5 PIC X(20) DISPLAY VALUE 'CA-REQUEST-ID OF DFH'.
            5 PIC X(8) DISPLAY VALUE 'COMMAREA'.
         3 AZU0000000D.
            5 PIC X(20) DISPLAY VALUE 'CA-RETURN-CODE OF DF'.
            5 PIC X(9) DISPLAY VALUE 'HCOMMAREA'.
         3 AZU0000000F.
            5 PIC X(20) DISPLAY VALUE 'CA-CUSTOMER-NUM OF D'.
            5 PIC X(10) DISPLAY VALUE 'FHCOMMAREA'.
         3 AZU00000011.
            5 PIC X(20) DISPLAY VALUE 'CA-FIRST-NAME OF CA-'.
            5 PIC X(20) DISPLAY VALUE 'CUSTOMER-REQUEST OF '.
            5 PIC X(11) DISPLAY VALUE 'DFHCOMMAREA'.
         3 AZU00000013.
            5 PIC X(20) DISPLAY VALUE 'CA-LAST-NAME OF CA-C'.
            5 PIC X(20) DISPLAY VALUE 'USTOMER-REQUEST OF D'.
            5 PIC X(10) DISPLAY VALUE 'FHCOMMAREA'.
         3 AZU00000015.
            5 PIC X(20) DISPLAY VALUE 'CA-DOB OF CA-CUSTOME'.
            5 PIC X(20) DISPLAY VALUE 'R-REQUEST OF DFHCOMM'.
            5 PIC X(4) DISPLAY VALUE 'AREA'.
         3 AZU00000017.
            5 PIC X(20) DISPLAY VALUE 'CA-HOUSE-NAME OF CA-'.
            5 PIC X(20) DISPLAY VALUE 'CUSTOMER-REQUEST OF '.
            5 PIC X(11) DISPLAY VALUE 'DFHCOMMAREA'.
         3 AZU00000019.
            5 PIC X(20) DISPLAY VALUE 'CA-HOUSE-NUM OF CA-C'.
            5 PIC X(20) DISPLAY VALUE 'USTOMER-REQUEST OF D'.
            5 PIC X(10) DISPLAY VALUE 'FHCOMMAREA'.
         3 AZU0000001B.
            5 PIC X(20) DISPLAY VALUE 'CA-POSTCODE OF CA-CU'.
            5 PIC X(20) DISPLAY VALUE 'STOMER-REQUEST OF DF'.
            5 PIC X(9) DISPLAY VALUE 'HCOMMAREA'.
         3 AZU0000001D.
            5 PIC X(20) DISPLAY VALUE 'CA-NUM-POLICIES OF C'.
            5 PIC X(20) DISPLAY VALUE 'A-CUSTOMER-REQUEST O'.
            5 PIC X(13) DISPLAY VALUE 'F DFHCOMMAREA'.
         3 AZU0000001F.
            5 PIC X(20) DISPLAY VALUE 'CA-PHONE-MOBILE OF C'.
            5 PIC X(20) DISPLAY VALUE 'A-CUSTOMER-REQUEST O'.
            5 PIC X(13) DISPLAY VALUE 'F DFHCOMMAREA'.
         3 AZU00000021.
            5 PIC X(20) DISPLAY VALUE 'CA-PHONE-HOME OF CA-'.
            5 PIC X(20) DISPLAY VALUE 'CUSTOMER-REQUEST OF '.
            5 PIC X(11) DISPLAY VALUE 'DFHCOMMAREA'.
         3 AZU00000023.
            5 PIC X(20) DISPLAY VALUE 'CA-EMAIL-ADDRESS OF '.
            5 PIC X(20) DISPLAY VALUE 'CA-CUSTOMER-REQUEST '.
            5 PIC X(14) DISPLAY VALUE 'OF DFHCOMMAREA'.
         3 AZU00000025.
            5 PIC X(20) DISPLAY VALUE 'CA-POLICY-DATA OF CA'.
            5 PIC X(20) DISPLAY VALUE '-CUSTOMER-REQUEST OF'.
            5 PIC X(12) DISPLAY VALUE ' DFHCOMMAREA'.
       1 AZ-COMPARE-WORK-ITEMS.
          3 AZU0000000C PIC X(6) OCCURS 2.
          3 AZU0000000E PIC 9(2) OCCURS 2.
          3 AZU00000010 PIC 9(10) OCCURS 2.
          3 AZU00000012 PIC X(10) OCCURS 2.
          3 AZU00000014 PIC X(20) OCCURS 2.
          3 AZU00000016 PIC X(10) OCCURS 2.
          3 AZU00000018 PIC X(20) OCCURS 2.
          3 AZU0000001A PIC X(4) OCCURS 2.
          3 AZU0000001C PIC X(8) OCCURS 2.
          3 AZU0000001E PIC 9(3) OCCURS 2.
          3 AZU00000020 PIC X(20) OCCURS 2.
          3 AZU00000022 PIC X(20) OCCURS 2.
          3 AZU00000024 PIC X(100) OCCURS 2.
          3 AZU00000026 PIC X(32267) OCCURS 2.
       LINKAGE SECTION.
       01 AZ-TEST                   PIC X(80).
       01 AZ-ARG-LIST.
         03 ARG-LENGTH PIC 9(4) COMP-4.
         03 ARG-DATA PIC X(256).
       01 AZ-INFO-BLOCK.
         COPY EQAITERC.
       01 AZ-PROC-PTR       USAGE IS PROCEDURE-POINTER.
       01 AZ-COMPARE-ITEM-NAME      PIC X(1000).
       01 AZ-COMPARE-ITEM-VALUE     PIC X(254).
       01 AZ-COMPARE-ITEM-EXP-VALUE PIC X(254).
      *  *** DFHEIBLK : ZUT0000008B
       1 ZUT0000008B.
      *    *** EIBTIME : ZUT0000008C
         2 ZUT0000008C PICTURE S9(7) USAGE COMPUTATIONAL-3.
      *    *** EIBDATE : ZUT0000008D
         2 ZUT0000008D PICTURE S9(7) USAGE COMPUTATIONAL-3.
      *    *** EIBTRNID : ZUT0000008E
         2 ZUT0000008E PICTURE X(4).
      *    *** EIBTASKN : ZUT0000008F
         2 ZUT0000008F PICTURE S9(7) USAGE COMPUTATIONAL-3.
      *    *** EIBTRMID : ZUT00000090
         2 ZUT00000090 PICTURE X(4).
      *    *** DFHEIGDI : ZUT00000091
         2 ZUT00000091 PICTURE S9(4) USAGE COMPUTATIONAL-5.
      *    *** EIBCPOSN : ZUT00000092
         2 ZUT00000092 PICTURE S9(4) USAGE COMPUTATIONAL-5.
      *    *** EIBCALEN : ZUT00000093
         2 ZUT00000093 PICTURE S9(4) USAGE COMPUTATIONAL-5.
      *    *** EIBAID : ZUT00000094
         2 ZUT00000094 PICTURE X(1).
      *    *** EIBFN : ZUT00000095
         2 ZUT00000095 PICTURE X(2).
      *    *** EIBRCODE : ZUT00000096
         2 ZUT00000096 PICTURE X(6).
      *    *** EIBDS : ZUT00000097
         2 ZUT00000097 PICTURE X(8).
      *    *** EIBREQID : ZUT00000098
         2 ZUT00000098 PICTURE X(8).
      *    *** EIBRSRCE : ZUT00000099
         2 ZUT00000099 PICTURE X(8).
      *    *** EIBSYNC : ZUT0000009A
         2 ZUT0000009A PICTURE X.
      *    *** EIBFREE : ZUT0000009B
         2 ZUT0000009B PICTURE X.
      *    *** EIBRECV : ZUT0000009C
         2 ZUT0000009C PICTURE X.
      *    *** EIBSEND : ZUT0000009D
         2 ZUT0000009D PICTURE X.
      *    *** EIBATT : ZUT0000009E
         2 ZUT0000009E PICTURE X.
      *    *** EIBEOC : ZUT0000009F
         2 ZUT0000009F PICTURE X.
      *    *** EIBFMH : ZUT000000A0
         2 ZUT000000A0 PICTURE X.
      *    *** EIBCOMPL : ZUT000000A1
         2 ZUT000000A1 PICTURE X(1).
      *    *** EIBSIG : ZUT000000A2
         2 ZUT000000A2 PICTURE X(1).
      *    *** EIBCONF : ZUT000000A3
         2 ZUT000000A3 PICTURE X(1).
      *    *** EIBERR : ZUT000000A4
         2 ZUT000000A4 PICTURE X(1).
      *    *** EIBERRCD : ZUT000000A5
         2 ZUT000000A5 PICTURE X(4).
      *    *** EIBSYNRB : ZUT000000A6
         2 ZUT000000A6 PICTURE X.
      *    *** EIBNODAT : ZUT000000A7
         2 ZUT000000A7 PICTURE X.
      *    *** EIBRESP : ZUT000000A8
         2 ZUT000000A8 PICTURE S9(8) USAGE COMPUTATIONAL.
      *    *** EIBRESP2 : ZUT000000A9
         2 ZUT000000A9 PICTURE S9(8) USAGE COMPUTATIONAL.
      *    *** EIBRLDBK : ZUT000000AA
         2 ZUT000000AA PICTURE X(1).
      *  *** DFHCOMMAREA : ZUT000000AB
       1 ZUT000000AB.
      *    *** CA-REQUEST-ID : ZUT000000AC
         3 ZUT000000AC PIC X(6).
      *    *** CA-RETURN-CODE : ZUT000000AD
         3 ZUT000000AD PIC 9(2).
      *    *** CA-CUSTOMER-NUM : ZUT000000AE
         3 ZUT000000AE PIC 9(10).
      *    *** CA-REQUEST-SPECIFIC : ZUT000000AF
         3 ZUT000000AF PIC X(32482).
      *    *** CA-CUSTOMER-REQUEST : ZUT000000B0
         3 ZUT000000B0 REDEFINES ZUT000000AF.
      *    *** CA-FIRST-NAME : ZUT000000B1
         5 ZUT000000B1 PIC X(10).
      *    *** CA-LAST-NAME : ZUT000000B2
         5 ZUT000000B2 PIC X(20).
      *    *** CA-DOB : ZUT000000B3
         5 ZUT000000B3 PIC X(10).
      *    *** CA-HOUSE-NAME : ZUT000000B4
         5 ZUT000000B4 PIC X(20).
      *    *** CA-HOUSE-NUM : ZUT000000B5
         5 ZUT000000B5 PIC X(4).
      *    *** CA-POSTCODE : ZUT000000B6
         5 ZUT000000B6 PIC X(8).
      *    *** CA-NUM-POLICIES : ZUT000000B7
         5 ZUT000000B7 PIC 9(3).
      *    *** CA-PHONE-MOBILE : ZUT000000B8
         5 ZUT000000B8 PIC X(20).
      *    *** CA-PHONE-HOME : ZUT000000B9
         5 ZUT000000B9 PIC X(20).
      *    *** CA-EMAIL-ADDRESS : ZUT000000BA
         5 ZUT000000BA PIC X(100).
      *    *** CA-POLICY-DATA : ZUT000000BB
         5 ZUT000000BB PIC X(32267).
      *    *** CA-CUSTSECR-REQUEST : ZUT000000BC
         3 ZUT000000BC REDEFINES ZUT000000AF.
      *    *** CA-CUSTSECR-PASS : ZUT000000BD
         5 ZUT000000BD PIC X(32).
      *    *** CA-CUSTSECR-COUNT : ZUT000000BE
         5 ZUT000000BE PIC X(4).
      *    *** CA-CUSTSECR-STATE : ZUT000000BF
         5 ZUT000000BF PIC X.
      *    *** CA-CUSTSECR-DATA : ZUT000000C0
         5 ZUT000000C0 PIC X(32445).
      *    *** CA-POLICY-REQUEST : ZUT000000C1
         3 ZUT000000C1 REDEFINES ZUT000000AF.
      *    *** CA-POLICY-NUM : ZUT000000C2
         5 ZUT000000C2 PIC 9(10).
      *    *** CA-POLICY-COMMON : ZUT000000C3
         5 ZUT000000C3.
      *    *** CA-ISSUE-DATE : ZUT000000C4
         7 ZUT000000C4 PIC X(10).
      *    *** CA-EXPIRY-DATE : ZUT000000C5
         7 ZUT000000C5 PIC X(10).
      *    *** CA-LASTCHANGED : ZUT000000C6
         7 ZUT000000C6 PIC X(26).
      *    *** CA-BROKERID : ZUT000000C7
         7 ZUT000000C7 PIC 9(10).
      *    *** CA-BROKERSREF : ZUT000000C8
         7 ZUT000000C8 PIC X(10).
      *    *** CA-PAYMENT : ZUT000000C9
         7 ZUT000000C9 PIC 9(6).
      *    *** CA-POLICY-SPECIFIC : ZUT000000CA
         5 ZUT000000CA PIC X(32400).
      *    *** CA-ENDOWMENT : ZUT000000CB
         5 ZUT000000CB REDEFINES ZUT000000CA.
      *    *** CA-E-WITH-PROFITS : ZUT000000CC
         7 ZUT000000CC PIC X.
      *    *** CA-E-EQUITIES : ZUT000000CD
         7 ZUT000000CD PIC X.
      *    *** CA-E-MANAGED-FUND : ZUT000000CE
         7 ZUT000000CE PIC X.
      *    *** CA-E-FUND-NAME : ZUT000000CF
         7 ZUT000000CF PIC X(10).
      *    *** CA-E-TERM : ZUT000000D0
         7 ZUT000000D0 PIC 99.
      *    *** CA-E-SUM-ASSURED : ZUT000000D1
         7 ZUT000000D1 PIC 9(6).
      *    *** CA-E-LIFE-ASSURED : ZUT000000D2
         7 ZUT000000D2 PIC X(31).
      *    *** CA-E-PADDING-DATA : ZUT000000D3
         7 ZUT000000D3 PIC X(32348).
      *    *** CA-HOUSE : ZUT000000D4
         5 ZUT000000D4 REDEFINES ZUT000000CA.
      *    *** CA-H-PROPERTY-TYPE : ZUT000000D5
         7 ZUT000000D5 PIC X(15).
      *    *** CA-H-BEDROOMS : ZUT000000D6
         7 ZUT000000D6 PIC 9(3).
      *    *** CA-H-VALUE : ZUT000000D7
         7 ZUT000000D7 PIC 9(8).
      *    *** CA-H-HOUSE-NAME : ZUT000000D8
         7 ZUT000000D8 PIC X(20).
      *    *** CA-H-HOUSE-NUMBER : ZUT000000D9
         7 ZUT000000D9 PIC X(4).
      *    *** CA-H-POSTCODE : ZUT000000DA
         7 ZUT000000DA PIC X(8).
      *    *** CA-H-FILLER : ZUT000000DB
         7 ZUT000000DB PIC X(32342).
      *    *** CA-MOTOR : ZUT000000DC
         5 ZUT000000DC REDEFINES ZUT000000CA.
      *    *** CA-M-MAKE : ZUT000000DD
         7 ZUT000000DD PIC X(15).
      *    *** CA-M-MODEL : ZUT000000DE
         7 ZUT000000DE PIC X(15).
      *    *** CA-M-VALUE : ZUT000000DF
         7 ZUT000000DF PIC 9(6).
      *    *** CA-M-REGNUMBER : ZUT000000E0
         7 ZUT000000E0 PIC X(7).
      *    *** CA-M-COLOUR : ZUT000000E1
         7 ZUT000000E1 PIC X(8).
      *    *** CA-M-CC : ZUT000000E2
         7 ZUT000000E2 PIC 9(4).
      *    *** CA-M-MANUFACTURED : ZUT000000E3
         7 ZUT000000E3 PIC X(10).
      *    *** CA-M-PREMIUM : ZUT000000E4
         7 ZUT000000E4 PIC 9(6).
      *    *** CA-M-ACCIDENTS : ZUT000000E5
         7 ZUT000000E5 PIC 9(6).
      *    *** CA-M-FILLER : ZUT000000E6
         7 ZUT000000E6 PIC X(32323).
      *    *** CA-COMMERCIAL : ZUT000000E7
         5 ZUT000000E7 REDEFINES ZUT000000CA.
      *    *** CA-B-ADDRESS : ZUT000000E8
         7 ZUT000000E8 PIC X(255).
      *    *** CA-B-POSTCODE : ZUT000000E9
         7 ZUT000000E9 PIC X(8).
      *    *** CA-B-LATITUDE : ZUT000000EA
         7 ZUT000000EA PIC X(11).
      *    *** CA-B-LONGITUDE : ZUT000000EB
         7 ZUT000000EB PIC X(11).
      *    *** CA-B-CUSTOMER : ZUT000000EC
         7 ZUT000000EC PIC X(255).
      *    *** CA-B-PROPTYPE : ZUT000000ED
         7 ZUT000000ED PIC X(255).
      *    *** CA-B-FIREPERIL : ZUT000000EE
         7 ZUT000000EE PIC 9(4).
      *    *** CA-B-FIREPREMIUM : ZUT000000EF
         7 ZUT000000EF PIC 9(8).
      *    *** CA-B-CRIMEPERIL : ZUT000000F0
         7 ZUT000000F0 PIC 9(4).
      *    *** CA-B-CRIMEPREMIUM : ZUT000000F1
         7 ZUT000000F1 PIC 9(8).
      *    *** CA-B-FLOODPERIL : ZUT000000F2
         7 ZUT000000F2 PIC 9(4).
      *    *** CA-B-FLOODPREMIUM : ZUT000000F3
         7 ZUT000000F3 PIC 9(8).
      *    *** CA-B-WEATHERPERIL : ZUT000000F4
         7 ZUT000000F4 PIC 9(4).
      *    *** CA-B-WEATHERPREMIUM : ZUT000000F5
         7 ZUT000000F5 PIC 9(8).
      *    *** CA-B-STATUS : ZUT000000F6
         7 ZUT000000F6 PIC 9(4).
      *    *** CA-B-REJECTREASON : ZUT000000F7
         7 ZUT000000F7 PIC X(255).
      *    *** CA-B-FILLER : ZUT000000F8
         7 ZUT000000F8 PIC X(31298).
      *    *** CA-CLAIM : ZUT000000F9
         5 ZUT000000F9 REDEFINES ZUT000000CA.
      *    *** CA-C-NUM : ZUT000000FA
         7 ZUT000000FA PIC 9(10).
      *    *** CA-C-DATE : ZUT000000FB
         7 ZUT000000FB PIC X(10).
      *    *** CA-C-PAID : ZUT000000FC
         7 ZUT000000FC PIC 9(8).
      *    *** CA-C-VALUE : ZUT000000FD
         7 ZUT000000FD PIC 9(8).
      *    *** CA-C-CAUSE : ZUT000000FE
         7 ZUT000000FE PIC X(255).
      *    *** CA-C-OBSERVATIONS : ZUT000000FF
         7 ZUT000000FF PIC X(255).
      *    *** CA-C-FILLER : ZUT00000100
         7 ZUT00000100 PIC X(31854).
       PROCEDURE DIVISION USING AZ-TEST
           ZUT0000008B ZUT000000AB AZ-INFO-BLOCK.
      * START
           DISPLAY 'AZU0000I TEST_TEST1 STARTED...'
           MOVE 0 TO AZ-TEST-NAME-LEN.
           INSPECT AZ-TEST TALLYING AZ-TEST-NAME-LEN FOR
           CHARACTERS BEFORE INITIAL SPACE.
      * INITIALIZE PARAMETER
           PERFORM INITIALIZE-PARM
      * SET AREA ADDRESS TO POINTER
      * SET INPUT VALUE
           MOVE 0 TO RETURN-CODE.
      * CALL TEST PROGRAM
           DISPLAY 'AZU0000I CALL LGICDB01'
           CALL BZUGETEP USING BY REFERENCE PROGRAM-NAME
             RETURNING AZ-EP-PTR.
           IF AZ-EP-PTR = NULL THEN
             MOVE 1 TO MESSAGE-LEN OF BZ-ASSERT
             STRING 'UNABLE TO GET THE ENTRY POINT BY BZUGETEP.'
               DELIMITED BY SIZE
               INTO MESSAGE-TXT OF BZ-ASSERT
               WITH POINTER MESSAGE-LEN OF BZ-ASSERT
             END-STRING
             SUBTRACT 1 FROM MESSAGE-LEN OF BZ-ASSERT
             PERFORM THROW-ASSERTION-M
             GOBACK
           END-IF
           SET ADDRESS OF AZ-PROC-PTR TO AZ-EP-PTR.
           CALL AZ-PROC-PTR
           USING ZUT0000008B ZUT000000AB
           .
      * EVALUATE OUTPUT VALUE
           MOVE 0 TO RETURN-CODE
           IF ZUT000000AC OF ZUT000000AB = AZU00000000 THEN
             CONTINUE
           ELSE
             MOVE ZUT000000AC OF ZUT000000AB TO AZU0000000C(1)
             MOVE AZU00000000 TO AZU0000000C(2)
             SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU0000000B
             MOVE LENGTH OF AZU0000000B TO AZ-COMPARE-ITEM-NAME-LEN
             SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF AZU0000000C(1)
             MOVE 6 TO AZ-COMPARE-ITEM-VALUE-LEN
             SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU0000000C(2)
             MOVE 6 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
             PERFORM THROW-ASSERTION
           END-IF
           IF (ZUT000000AD OF ZUT000000AB IS NUMERIC)
               AND (ZUT000000AD OF ZUT000000AB = 0) THEN
             CONTINUE
           ELSE
             MOVE ZUT000000AD OF ZUT000000AB TO AZU0000000E(1)
             MOVE 0 TO AZU0000000E(2)
             SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU0000000D
             MOVE LENGTH OF AZU0000000D TO AZ-COMPARE-ITEM-NAME-LEN
             IF ZUT000000AD OF ZUT000000AB IS NUMERIC THEN
              SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF AZU0000000E(1)
             ELSE
              SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF ZUT000000AD
           OF ZUT000000AB
             END-IF
             MOVE 2 TO AZ-COMPARE-ITEM-VALUE-LEN
             SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU0000000E(2)
             MOVE 2 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
             PERFORM THROW-ASSERTION
           END-IF
           IF (ZUT000000AE OF ZUT000000AB IS NUMERIC)
               AND (ZUT000000AE OF ZUT000000AB = 1) THEN
             CONTINUE
           ELSE
             MOVE ZUT000000AE OF ZUT000000AB TO AZU00000010(1)
             MOVE 1 TO AZU00000010(2)
             SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU0000000F
             MOVE LENGTH OF AZU0000000F TO AZ-COMPARE-ITEM-NAME-LEN
             IF ZUT000000AE OF ZUT000000AB IS NUMERIC THEN
              SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF AZU00000010(1)
             ELSE
              SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF ZUT000000AE
           OF ZUT000000AB
             END-IF
             MOVE 10 TO AZ-COMPARE-ITEM-VALUE-LEN
             SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU00000010(2)
             MOVE 10 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
             PERFORM THROW-ASSERTION
           END-IF
           IF ZUT000000B1 OF ZUT000000B0 OF ZUT000000AB = AZU00000001
           THEN
             CONTINUE
           ELSE
             MOVE ZUT000000B1 OF ZUT000000B0 OF ZUT000000AB TO
           AZU00000012(1)
             MOVE AZU00000001 TO AZU00000012(2)
             SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU00000011
             MOVE LENGTH OF AZU00000011 TO AZ-COMPARE-ITEM-NAME-LEN
             SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF AZU00000012(1)
             MOVE 10 TO AZ-COMPARE-ITEM-VALUE-LEN
             SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU00000012(2)
             MOVE 10 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
             PERFORM THROW-ASSERTION
           END-IF
           IF ZUT000000B2 OF ZUT000000B0 OF ZUT000000AB = AZU00000002
           THEN
             CONTINUE
           ELSE
             MOVE ZUT000000B2 OF ZUT000000B0 OF ZUT000000AB TO
           AZU00000014(1)
             MOVE AZU00000002 TO AZU00000014(2)
             SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU00000013
             MOVE LENGTH OF AZU00000013 TO AZ-COMPARE-ITEM-NAME-LEN
             SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF AZU00000014(1)
             MOVE 20 TO AZ-COMPARE-ITEM-VALUE-LEN
             SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU00000014(2)
             MOVE 20 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
             PERFORM THROW-ASSERTION
           END-IF
           IF ZUT000000B3 OF ZUT000000B0 OF ZUT000000AB = AZU00000003
           THEN
             CONTINUE
           ELSE
             MOVE ZUT000000B3 OF ZUT000000B0 OF ZUT000000AB TO
           AZU00000016(1)
             MOVE AZU00000003 TO AZU00000016(2)
             SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU00000015
             MOVE LENGTH OF AZU00000015 TO AZ-COMPARE-ITEM-NAME-LEN
             SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF AZU00000016(1)
             MOVE 10 TO AZ-COMPARE-ITEM-VALUE-LEN
             SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU00000016(2)
             MOVE 10 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
             PERFORM THROW-ASSERTION
           END-IF
           IF ZUT000000B4 OF ZUT000000B0 OF ZUT000000AB = AZU00000004
           THEN
             CONTINUE
           ELSE
             MOVE ZUT000000B4 OF ZUT000000B0 OF ZUT000000AB TO
           AZU00000018(1)
             MOVE AZU00000004 TO AZU00000018(2)
             SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU00000017
             MOVE LENGTH OF AZU00000017 TO AZ-COMPARE-ITEM-NAME-LEN
             SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF AZU00000018(1)
             MOVE 20 TO AZ-COMPARE-ITEM-VALUE-LEN
             SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU00000018(2)
             MOVE 20 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
             PERFORM THROW-ASSERTION
           END-IF
           IF ZUT000000B5 OF ZUT000000B0 OF ZUT000000AB = AZU00000005
           THEN
             CONTINUE
           ELSE
             MOVE ZUT000000B5 OF ZUT000000B0 OF ZUT000000AB TO
           AZU0000001A(1)
             MOVE AZU00000005 TO AZU0000001A(2)
             SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU00000019
             MOVE LENGTH OF AZU00000019 TO AZ-COMPARE-ITEM-NAME-LEN
             SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF AZU0000001A(1)
             MOVE 4 TO AZ-COMPARE-ITEM-VALUE-LEN
             SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU0000001A(2)
             MOVE 4 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
             PERFORM THROW-ASSERTION
           END-IF
           IF ZUT000000B6 OF ZUT000000B0 OF ZUT000000AB = AZU00000006
           THEN
             CONTINUE
           ELSE
             MOVE ZUT000000B6 OF ZUT000000B0 OF ZUT000000AB TO
           AZU0000001C(1)
             MOVE AZU00000006 TO AZU0000001C(2)
             SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU0000001B
             MOVE LENGTH OF AZU0000001B TO AZ-COMPARE-ITEM-NAME-LEN
             SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF AZU0000001C(1)
             MOVE 8 TO AZ-COMPARE-ITEM-VALUE-LEN
             SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU0000001C(2)
             MOVE 8 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
             PERFORM THROW-ASSERTION
           END-IF
           IF (ZUT000000B7 OF ZUT000000B0 OF ZUT000000AB IS NUMERIC)
               AND (ZUT000000B7 OF ZUT000000B0 OF ZUT000000AB = 0) THEN
             CONTINUE
           ELSE
             MOVE ZUT000000B7 OF ZUT000000B0 OF ZUT000000AB TO
           AZU0000001E(1)
             MOVE 0 TO AZU0000001E(2)
             SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU0000001D
             MOVE LENGTH OF AZU0000001D TO AZ-COMPARE-ITEM-NAME-LEN
             IF ZUT000000B7 OF ZUT000000B0 OF ZUT000000AB IS NUMERIC
           THEN
              SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF AZU0000001E(1)
             ELSE
              SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF ZUT000000B7
           OF ZUT000000B0 OF ZUT000000AB
             END-IF
             MOVE 3 TO AZ-COMPARE-ITEM-VALUE-LEN
             SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU0000001E(2)
             MOVE 3 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
             PERFORM THROW-ASSERTION
           END-IF
           IF ZUT000000B8 OF ZUT000000B0 OF ZUT000000AB = AZU00000007
           THEN
             CONTINUE
           ELSE
             MOVE ZUT000000B8 OF ZUT000000B0 OF ZUT000000AB TO
           AZU00000020(1)
             MOVE AZU00000007 TO AZU00000020(2)
             SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU0000001F
             MOVE LENGTH OF AZU0000001F TO AZ-COMPARE-ITEM-NAME-LEN
             SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF AZU00000020(1)
             MOVE 20 TO AZ-COMPARE-ITEM-VALUE-LEN
             SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU00000020(2)
             MOVE 20 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
             PERFORM THROW-ASSERTION
           END-IF
           IF ZUT000000B9 OF ZUT000000B0 OF ZUT000000AB = AZU00000008
           THEN
             CONTINUE
           ELSE
             MOVE ZUT000000B9 OF ZUT000000B0 OF ZUT000000AB TO
           AZU00000022(1)
             MOVE AZU00000008 TO AZU00000022(2)
             SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU00000021
             MOVE LENGTH OF AZU00000021 TO AZ-COMPARE-ITEM-NAME-LEN
             SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF AZU00000022(1)
             MOVE 20 TO AZ-COMPARE-ITEM-VALUE-LEN
             SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU00000022(2)
             MOVE 20 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
             PERFORM THROW-ASSERTION
           END-IF
           IF ZUT000000BA OF ZUT000000B0 OF ZUT000000AB = AZU00000009
           THEN
             CONTINUE
           ELSE
             MOVE ZUT000000BA OF ZUT000000B0 OF ZUT000000AB TO
           AZU00000024(1)
             MOVE AZU00000009 TO AZU00000024(2)
             SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU00000023
             MOVE LENGTH OF AZU00000023 TO AZ-COMPARE-ITEM-NAME-LEN
             SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF AZU00000024(1)
             MOVE 100 TO AZ-COMPARE-ITEM-VALUE-LEN
             SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU00000024(2)
             MOVE 100 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
             PERFORM THROW-ASSERTION
           END-IF
           IF ZUT000000BB OF ZUT000000B0 OF ZUT000000AB = AZU0000000A
           THEN
             CONTINUE
           ELSE
             MOVE ZUT000000BB OF ZUT000000B0 OF ZUT000000AB TO
           AZU00000026(1)
             MOVE AZU0000000A TO AZU00000026(2)
             SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU00000025
             MOVE LENGTH OF AZU00000025 TO AZ-COMPARE-ITEM-NAME-LEN
             SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF AZU00000026(1)
             MOVE 254 TO AZ-COMPARE-ITEM-VALUE-LEN
             SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU00000026(2)
             MOVE 254 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
             PERFORM THROW-ASSERTION
           END-IF
      * END
           DISPLAY 'AZU0000I TEST_TEST1 END.'
           GOBACK.
       INITIALIZE-PARM.
           EXIT.
       THROW-ASSERTION.
           MOVE 1 TO MESSAGE-LEN OF BZ-ASSERT
           STRING 'COMPARE FAILED IN PROCEDURE DIVISION.'
             DELIMITED BY SIZE INTO MESSAGE-TXT OF BZ-ASSERT
             WITH POINTER MESSAGE-LEN OF BZ-ASSERT
           END-STRING
           SUBTRACT 1 FROM MESSAGE-LEN OF BZ-ASSERT
           SET ADDRESS OF AZ-COMPARE-ITEM-NAME TO
           AZ-COMPARE-ITEM-NAME-PTR.
           SET ADDRESS OF AZ-COMPARE-ITEM-VALUE TO
           AZ-COMPARE-ITEM-VALUE-PTR.
           SET ADDRESS OF AZ-COMPARE-ITEM-EXP-VALUE TO
           AZ-COMPARE-ITEM-EXP-VALUE-PTR.
           DISPLAY 'AZU0000I *******************************************
      -    '*************************************'
           DISPLAY 'AZU2001W THE TEST "' AZ-TEST(1:AZ-TEST-NAME-LEN) '"
      -    'FAILED DUE TO AN ASSERTION.'
           DISPLAY 'AZU1101I ' MESSAGE-TXT OF BZ-ASSERT(1:MESSAGE-LEN
           OF BZ-ASSERT)
           DISPLAY 'AZU0000I  DATA ITEM NAME : '
           AZ-COMPARE-ITEM-NAME(1:AZ-COMPARE-ITEM-NAME-LEN)
           DISPLAY 'AZU0000I   VALUE         : '
           AZ-COMPARE-ITEM-VALUE(1:AZ-COMPARE-ITEM-VALUE-LEN)
           DISPLAY 'AZU0000I   EXPECTED VALUE: '
           AZ-COMPARE-ITEM-EXP-VALUE(1:AZ-COMPARE-ITEM-EXP-VALUE-LEN)
           DISPLAY 'AZU0000I *******************************************
      -    '*************************************'
           CALL BZUASSRT USING BZ-P1 BZ-P2 BZ-P3 BZ-ASSERT
           MOVE 1 TO TRACE-LEN OF BZ-TRACE
           MOVE 1 TO AZ-ITEM-NAME-S
           PERFORM UNTIL AZ-ITEM-NAME-S > AZ-COMPARE-ITEM-NAME-LEN
             MOVE 206 TO AZ-ITEM-NAME-LEN
             IF AZ-ITEM-NAME-S + 206 > AZ-COMPARE-ITEM-NAME-LEN THEN
               MOVE AZ-COMPARE-ITEM-NAME-LEN TO AZ-ITEM-NAME-LEN
               SUBTRACT AZ-ITEM-NAME-S FROM AZ-ITEM-NAME-LEN
               ADD 1 TO AZ-ITEM-NAME-LEN
             END-IF
             STRING 'ITEM NAME='
             AZ-COMPARE-ITEM-NAME(AZ-ITEM-NAME-S:AZ-ITEM-NAME-LEN)
               DELIMITED BY SIZE INTO TRACE-TXT OF BZ-TRACE
               WITH POINTER TRACE-LEN OF BZ-TRACE
             END-STRING
             SUBTRACT 1 FROM TRACE-LEN OF BZ-TRACE
             SET AZ-TRACE-PTR TO ADDRESS OF TRACE-TXT OF BZ-TRACE
             CALL BZUTRACE USING BZ-TRACE
             MOVE 1 TO TRACE-LEN OF BZ-TRACE
             ADD AZ-ITEM-NAME-LEN TO AZ-ITEM-NAME-S
           END-PERFORM
           STRING 'VALUE   ='
           AZ-COMPARE-ITEM-VALUE(1:AZ-COMPARE-ITEM-VALUE-LEN)
               DELIMITED BY SIZE INTO TRACE-TXT OF BZ-TRACE
               WITH POINTER TRACE-LEN OF BZ-TRACE
             END-STRING
           SUBTRACT 1 FROM TRACE-LEN OF BZ-TRACE
           CALL BZUTRACE USING BZ-TRACE
           MOVE 1 TO TRACE-LEN OF BZ-TRACE
           STRING 'EXPECTED='
           AZ-COMPARE-ITEM-EXP-VALUE(1:AZ-COMPARE-ITEM-EXP-VALUE-LEN)
               DELIMITED BY SIZE INTO TRACE-TXT OF BZ-TRACE
               WITH POINTER TRACE-LEN OF BZ-TRACE
             END-STRING
           SUBTRACT 1 FROM TRACE-LEN OF BZ-TRACE
           CALL BZUTRACE USING BZ-TRACE
           EXIT.
       THROW-ASSERTION-M.
           DISPLAY 'AZU0000I *******************************************
      -    '*************************************'
           DISPLAY 'AZU2001W THE TEST "' AZ-TEST(1:AZ-TEST-NAME-LEN) '"
      -    'FAILED DUE TO AN ASSERTION.'
           DISPLAY 'AZU1101I ' MESSAGE-TXT OF BZ-ASSERT(1:MESSAGE-LEN
           OF BZ-ASSERT)
           DISPLAY 'AZU0000I *******************************************
      -    '*************************************'
           CALL BZUASSRT USING BZ-P1 BZ-P2 BZ-P3 BZ-ASSERT
           EXIT.
       END PROGRAM TEST_TEST1.
      *+---------------------------------------------------------------+
      *| UNIT TEST FOR Z/OS: BZU_TEST                                  |
      *|     CALLBACK DEFINITION FOR TEST                              |
      *| TEST CASE VERSION: 202                                        |
      *+---------------------------------------------------------------+
       IDENTIFICATION DIVISION.
       PROGRAM-ID. 'BZU_TEST'.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 PROGRAM-NAME   PIC X(8)  VALUE 'LGICDB01'.
       01 AZ-CSECT       PIC X(72) VALUE SPACES.
       01 BZ-ASSERT.
         03 MESSAGE-LEN PIC S9(4) COMP-4 VALUE 24.
         03 MESSAGE-TXT PIC X(254) VALUE 'HELLO FROM TEST CALLBACK'.
       01  BZ-P1 PIC S9(9) COMP-4 VALUE 4.
       01  BZ-P2 PIC S9(9) COMP-4 VALUE 2001.
       01  BZ-P3 PIC X(3) VALUE 'AZU'.
       01 BZ-TRACE.
         03 TRACE-LEN       PIC S9(4) COMP-4 VALUE 5.
         03 TRACE-TXT       PIC X(254) VALUE 'TRACE'.
       01 BZUASSRT          PIC X(8) VALUE 'BZUASSRT'.
       01 BZUTRACE          PIC X(8) VALUE 'BZUTRACE'.
       01 AZ-TRACE-PTR      POINTER.
       01 ASSERT-ST.
         03 ASSERT-RC PIC 9(9) BINARY VALUE 4.
         03 ASSERT-TEXT PIC 9(4) BINARY VALUE 0.
       01 AZ-TEST-NAME-LEN       PIC S9(9) COMP-5.
       LOCAL-STORAGE SECTION.
       LINKAGE SECTION.
       01 AZ-TEST                   PIC X(80).
       01 AZ-INFO-BLOCK.
          COPY EQAITERC.
       01 AZ-ARG-LIST.
         03 ARG-LENGTH PIC 9(4) COMP-4.
         03 ARG-DATA PIC X(256).
      *  *** DFHEIBLK : ZUT0000008B
       1 ZUT0000008B.
      *    *** EIBTIME : ZUT0000008C
         2 ZUT0000008C PICTURE S9(7) USAGE COMPUTATIONAL-3.
      *    *** EIBDATE : ZUT0000008D
         2 ZUT0000008D PICTURE S9(7) USAGE COMPUTATIONAL-3.
      *    *** EIBTRNID : ZUT0000008E
         2 ZUT0000008E PICTURE X(4).
      *    *** EIBTASKN : ZUT0000008F
         2 ZUT0000008F PICTURE S9(7) USAGE COMPUTATIONAL-3.
      *    *** EIBTRMID : ZUT00000090
         2 ZUT00000090 PICTURE X(4).
      *    *** DFHEIGDI : ZUT00000091
         2 ZUT00000091 PICTURE S9(4) USAGE COMPUTATIONAL-5.
      *    *** EIBCPOSN : ZUT00000092
         2 ZUT00000092 PICTURE S9(4) USAGE COMPUTATIONAL-5.
      *    *** EIBCALEN : ZUT00000093
         2 ZUT00000093 PICTURE S9(4) USAGE COMPUTATIONAL-5.
      *    *** EIBAID : ZUT00000094
         2 ZUT00000094 PICTURE X(1).
      *    *** EIBFN : ZUT00000095
         2 ZUT00000095 PICTURE X(2).
      *    *** EIBRCODE : ZUT00000096
         2 ZUT00000096 PICTURE X(6).
      *    *** EIBDS : ZUT00000097
         2 ZUT00000097 PICTURE X(8).
      *    *** EIBREQID : ZUT00000098
         2 ZUT00000098 PICTURE X(8).
      *    *** EIBRSRCE : ZUT00000099
         2 ZUT00000099 PICTURE X(8).
      *    *** EIBSYNC : ZUT0000009A
         2 ZUT0000009A PICTURE X.
      *    *** EIBFREE : ZUT0000009B
         2 ZUT0000009B PICTURE X.
      *    *** EIBRECV : ZUT0000009C
         2 ZUT0000009C PICTURE X.
      *    *** EIBSEND : ZUT0000009D
         2 ZUT0000009D PICTURE X.
      *    *** EIBATT : ZUT0000009E
         2 ZUT0000009E PICTURE X.
      *    *** EIBEOC : ZUT0000009F
         2 ZUT0000009F PICTURE X.
      *    *** EIBFMH : ZUT000000A0
         2 ZUT000000A0 PICTURE X.
      *    *** EIBCOMPL : ZUT000000A1
         2 ZUT000000A1 PICTURE X(1).
      *    *** EIBSIG : ZUT000000A2
         2 ZUT000000A2 PICTURE X(1).
      *    *** EIBCONF : ZUT000000A3
         2 ZUT000000A3 PICTURE X(1).
      *    *** EIBERR : ZUT000000A4
         2 ZUT000000A4 PICTURE X(1).
      *    *** EIBERRCD : ZUT000000A5
         2 ZUT000000A5 PICTURE X(4).
      *    *** EIBSYNRB : ZUT000000A6
         2 ZUT000000A6 PICTURE X.
      *    *** EIBNODAT : ZUT000000A7
         2 ZUT000000A7 PICTURE X.
      *    *** EIBRESP : ZUT000000A8
         2 ZUT000000A8 PICTURE S9(8) USAGE COMPUTATIONAL.
      *    *** EIBRESP2 : ZUT000000A9
         2 ZUT000000A9 PICTURE S9(8) USAGE COMPUTATIONAL.
      *    *** EIBRLDBK : ZUT000000AA
         2 ZUT000000AA PICTURE X(1).
      *  *** DFHCOMMAREA : ZUT000000AB
       1 ZUT000000AB.
      *    *** CA-REQUEST-ID : ZUT000000AC
         3 ZUT000000AC PIC X(6).
      *    *** CA-RETURN-CODE : ZUT000000AD
         3 ZUT000000AD PIC 9(2).
      *    *** CA-CUSTOMER-NUM : ZUT000000AE
         3 ZUT000000AE PIC 9(10).
      *    *** CA-REQUEST-SPECIFIC : ZUT000000AF
         3 ZUT000000AF PIC X(32482).
      *    *** CA-CUSTOMER-REQUEST : ZUT000000B0
         3 ZUT000000B0 REDEFINES ZUT000000AF.
      *    *** CA-FIRST-NAME : ZUT000000B1
         5 ZUT000000B1 PIC X(10).
      *    *** CA-LAST-NAME : ZUT000000B2
         5 ZUT000000B2 PIC X(20).
      *    *** CA-DOB : ZUT000000B3
         5 ZUT000000B3 PIC X(10).
      *    *** CA-HOUSE-NAME : ZUT000000B4
         5 ZUT000000B4 PIC X(20).
      *    *** CA-HOUSE-NUM : ZUT000000B5
         5 ZUT000000B5 PIC X(4).
      *    *** CA-POSTCODE : ZUT000000B6
         5 ZUT000000B6 PIC X(8).
      *    *** CA-NUM-POLICIES : ZUT000000B7
         5 ZUT000000B7 PIC 9(3).
      *    *** CA-PHONE-MOBILE : ZUT000000B8
         5 ZUT000000B8 PIC X(20).
      *    *** CA-PHONE-HOME : ZUT000000B9
         5 ZUT000000B9 PIC X(20).
      *    *** CA-EMAIL-ADDRESS : ZUT000000BA
         5 ZUT000000BA PIC X(100).
      *    *** CA-POLICY-DATA : ZUT000000BB
         5 ZUT000000BB PIC X(32267).
      *    *** CA-CUSTSECR-REQUEST : ZUT000000BC
         3 ZUT000000BC REDEFINES ZUT000000AF.
      *    *** CA-CUSTSECR-PASS : ZUT000000BD
         5 ZUT000000BD PIC X(32).
      *    *** CA-CUSTSECR-COUNT : ZUT000000BE
         5 ZUT000000BE PIC X(4).
      *    *** CA-CUSTSECR-STATE : ZUT000000BF
         5 ZUT000000BF PIC X.
      *    *** CA-CUSTSECR-DATA : ZUT000000C0
         5 ZUT000000C0 PIC X(32445).
      *    *** CA-POLICY-REQUEST : ZUT000000C1
         3 ZUT000000C1 REDEFINES ZUT000000AF.
      *    *** CA-POLICY-NUM : ZUT000000C2
         5 ZUT000000C2 PIC 9(10).
      *    *** CA-POLICY-COMMON : ZUT000000C3
         5 ZUT000000C3.
      *    *** CA-ISSUE-DATE : ZUT000000C4
         7 ZUT000000C4 PIC X(10).
      *    *** CA-EXPIRY-DATE : ZUT000000C5
         7 ZUT000000C5 PIC X(10).
      *    *** CA-LASTCHANGED : ZUT000000C6
         7 ZUT000000C6 PIC X(26).
      *    *** CA-BROKERID : ZUT000000C7
         7 ZUT000000C7 PIC 9(10).
      *    *** CA-BROKERSREF : ZUT000000C8
         7 ZUT000000C8 PIC X(10).
      *    *** CA-PAYMENT : ZUT000000C9
         7 ZUT000000C9 PIC 9(6).
      *    *** CA-POLICY-SPECIFIC : ZUT000000CA
         5 ZUT000000CA PIC X(32400).
      *    *** CA-ENDOWMENT : ZUT000000CB
         5 ZUT000000CB REDEFINES ZUT000000CA.
      *    *** CA-E-WITH-PROFITS : ZUT000000CC
         7 ZUT000000CC PIC X.
      *    *** CA-E-EQUITIES : ZUT000000CD
         7 ZUT000000CD PIC X.
      *    *** CA-E-MANAGED-FUND : ZUT000000CE
         7 ZUT000000CE PIC X.
      *    *** CA-E-FUND-NAME : ZUT000000CF
         7 ZUT000000CF PIC X(10).
      *    *** CA-E-TERM : ZUT000000D0
         7 ZUT000000D0 PIC 99.
      *    *** CA-E-SUM-ASSURED : ZUT000000D1
         7 ZUT000000D1 PIC 9(6).
      *    *** CA-E-LIFE-ASSURED : ZUT000000D2
         7 ZUT000000D2 PIC X(31).
      *    *** CA-E-PADDING-DATA : ZUT000000D3
         7 ZUT000000D3 PIC X(32348).
      *    *** CA-HOUSE : ZUT000000D4
         5 ZUT000000D4 REDEFINES ZUT000000CA.
      *    *** CA-H-PROPERTY-TYPE : ZUT000000D5
         7 ZUT000000D5 PIC X(15).
      *    *** CA-H-BEDROOMS : ZUT000000D6
         7 ZUT000000D6 PIC 9(3).
      *    *** CA-H-VALUE : ZUT000000D7
         7 ZUT000000D7 PIC 9(8).
      *    *** CA-H-HOUSE-NAME : ZUT000000D8
         7 ZUT000000D8 PIC X(20).
      *    *** CA-H-HOUSE-NUMBER : ZUT000000D9
         7 ZUT000000D9 PIC X(4).
      *    *** CA-H-POSTCODE : ZUT000000DA
         7 ZUT000000DA PIC X(8).
      *    *** CA-H-FILLER : ZUT000000DB
         7 ZUT000000DB PIC X(32342).
      *    *** CA-MOTOR : ZUT000000DC
         5 ZUT000000DC REDEFINES ZUT000000CA.
      *    *** CA-M-MAKE : ZUT000000DD
         7 ZUT000000DD PIC X(15).
      *    *** CA-M-MODEL : ZUT000000DE
         7 ZUT000000DE PIC X(15).
      *    *** CA-M-VALUE : ZUT000000DF
         7 ZUT000000DF PIC 9(6).
      *    *** CA-M-REGNUMBER : ZUT000000E0
         7 ZUT000000E0 PIC X(7).
      *    *** CA-M-COLOUR : ZUT000000E1
         7 ZUT000000E1 PIC X(8).
      *    *** CA-M-CC : ZUT000000E2
         7 ZUT000000E2 PIC 9(4).
      *    *** CA-M-MANUFACTURED : ZUT000000E3
         7 ZUT000000E3 PIC X(10).
      *    *** CA-M-PREMIUM : ZUT000000E4
         7 ZUT000000E4 PIC 9(6).
      *    *** CA-M-ACCIDENTS : ZUT000000E5
         7 ZUT000000E5 PIC 9(6).
      *    *** CA-M-FILLER : ZUT000000E6
         7 ZUT000000E6 PIC X(32323).
      *    *** CA-COMMERCIAL : ZUT000000E7
         5 ZUT000000E7 REDEFINES ZUT000000CA.
      *    *** CA-B-ADDRESS : ZUT000000E8
         7 ZUT000000E8 PIC X(255).
      *    *** CA-B-POSTCODE : ZUT000000E9
         7 ZUT000000E9 PIC X(8).
      *    *** CA-B-LATITUDE : ZUT000000EA
         7 ZUT000000EA PIC X(11).
      *    *** CA-B-LONGITUDE : ZUT000000EB
         7 ZUT000000EB PIC X(11).
      *    *** CA-B-CUSTOMER : ZUT000000EC
         7 ZUT000000EC PIC X(255).
      *    *** CA-B-PROPTYPE : ZUT000000ED
         7 ZUT000000ED PIC X(255).
      *    *** CA-B-FIREPERIL : ZUT000000EE
         7 ZUT000000EE PIC 9(4).
      *    *** CA-B-FIREPREMIUM : ZUT000000EF
         7 ZUT000000EF PIC 9(8).
      *    *** CA-B-CRIMEPERIL : ZUT000000F0
         7 ZUT000000F0 PIC 9(4).
      *    *** CA-B-CRIMEPREMIUM : ZUT000000F1
         7 ZUT000000F1 PIC 9(8).
      *    *** CA-B-FLOODPERIL : ZUT000000F2
         7 ZUT000000F2 PIC 9(4).
      *    *** CA-B-FLOODPREMIUM : ZUT000000F3
         7 ZUT000000F3 PIC 9(8).
      *    *** CA-B-WEATHERPERIL : ZUT000000F4
         7 ZUT000000F4 PIC 9(4).
      *    *** CA-B-WEATHERPREMIUM : ZUT000000F5
         7 ZUT000000F5 PIC 9(8).
      *    *** CA-B-STATUS : ZUT000000F6
         7 ZUT000000F6 PIC 9(4).
      *    *** CA-B-REJECTREASON : ZUT000000F7
         7 ZUT000000F7 PIC X(255).
      *    *** CA-B-FILLER : ZUT000000F8
         7 ZUT000000F8 PIC X(31298).
      *    *** CA-CLAIM : ZUT000000F9
         5 ZUT000000F9 REDEFINES ZUT000000CA.
      *    *** CA-C-NUM : ZUT000000FA
         7 ZUT000000FA PIC 9(10).
      *    *** CA-C-DATE : ZUT000000FB
         7 ZUT000000FB PIC X(10).
      *    *** CA-C-PAID : ZUT000000FC
         7 ZUT000000FC PIC 9(8).
      *    *** CA-C-VALUE : ZUT000000FD
         7 ZUT000000FD PIC 9(8).
      *    *** CA-C-CAUSE : ZUT000000FE
         7 ZUT000000FE PIC X(255).
      *    *** CA-C-OBSERVATIONS : ZUT000000FF
         7 ZUT000000FF PIC X(255).
      *    *** CA-C-FILLER : ZUT00000100
         7 ZUT00000100 PIC X(31854).
       PROCEDURE DIVISION.
      * SET INPUT VALUE
           ENTRY "PGM_INPT_LGICDB01" USING AZ-TEST AZ-INFO-BLOCK
           ZUT0000008B ZUT000000AB.
           DISPLAY 'AZU0000I PGM_INPT_LGICDB01 INPUT VALUES...'.
           MOVE 0 TO RETURN-CODE.
           MOVE 0 TO AZ-TEST-NAME-LEN.
           INSPECT AZ-TEST TALLYING AZ-TEST-NAME-LEN FOR CHARACTERS
             BEFORE INITIAL SPACE.
           EVALUATE AZ-TEST(1:AZ-TEST-NAME-LEN)
           WHEN SPACE
             CONTINUE
           WHEN OTHER
             CONTINUE
           END-EVALUATE.
           PERFORM TEARDOWN.
           GOBACK.
      * EVALUATE OUTPUT VALUE
           ENTRY "PGM_OUTP_LGICDB01" USING AZ-TEST AZ-INFO-BLOCK
           ZUT0000008B ZUT000000AB.
           DISPLAY 'AZU0000I PGM_OUTP_LGICDB01 CHECK VALUES...'.
           MOVE 4 TO RETURN-CODE.
           MOVE 0 TO AZ-TEST-NAME-LEN.
           INSPECT AZ-TEST TALLYING AZ-TEST-NAME-LEN FOR CHARACTERS
             BEFORE INITIAL SPACE.
           EVALUATE AZ-TEST(1:AZ-TEST-NAME-LEN)
           WHEN SPACE
             CONTINUE
           WHEN 'TEST1'
             MOVE 0 TO RETURN-CODE
           WHEN OTHER
             CONTINUE
           END-EVALUATE.
           PERFORM TEARDOWN.
           GOBACK.
       TEARDOWN.
           DISPLAY 'AZU0000I BZU_TEST END.'
           EXIT.
       THROW-ASSERTION-M.
           DISPLAY 'AZU0000I *******************************************
      -    '*************************************'
           DISPLAY 'AZU2001W THE TEST "' AZ-TEST(1:AZ-TEST-NAME-LEN) '"
      -    'FAILED DUE TO AN ASSERTION.'
           DISPLAY 'AZU1101I ' MESSAGE-TXT OF BZ-ASSERT(1:MESSAGE-LEN
           OF BZ-ASSERT)
           DISPLAY 'AZU0000I *******************************************
      -    '*************************************'
           CALL BZUASSRT USING BZ-P1 BZ-P2 BZ-P3 BZ-ASSERT
           EXIT.
       END PROGRAM BZU_TEST.
      *+---------------------------------------------------------------+
      *| UNIT TEST FOR Z/OS: BZU_INIT                                  |
      *|     INITIAL PROCEDURE                                         |
      *| TEST CASE VERSION: 202                                        |
      *+---------------------------------------------------------------+
       IDENTIFICATION DIVISION.
       PROGRAM-ID. 'BZU_INIT'.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 AZ-TEST-NAME-LEN      PIC S9(9) COMP-5.
       01 AZ-TESTCASE-ID        PIC X(36)
           VALUE 'e169feb0-086e-49af-afcd-91114844336d'.
       LINKAGE SECTION.
       01 AZ-TEST               PIC X(80).
       01 AZ-TEST-ID            PIC X(80).
       01 AZ-INFO-BLOCK.
           COPY EQAITERC.
       PROCEDURE DIVISION USING AZ-TEST
                                AZ-TEST-ID
                                AZ-INFO-BLOCK.
           MOVE 0 TO AZ-TEST-NAME-LEN.
           INSPECT AZ-TEST TALLYING AZ-TEST-NAME-LEN FOR
           CHARACTERS BEFORE INITIAL SPACE.
           DISPLAY 'AZU0000I BZU_INIT: ' AZ-TEST(1:AZ-TEST-NAME-LEN)
           DISPLAY 'AZU0000I TEST CASE VERSION: 202'
           DISPLAY 'AZU0001I FOR TEST RUNNER: latest'
           MOVE AZ-TESTCASE-ID TO AZ-TEST-ID
           GOBACK.
       END PROGRAM BZU_INIT.
      *+---------------------------------------------------------------+
      *| UNIT TEST FOR Z/OS: BZU_TERM                                  |
      *|     TERMINATION PROCEDURE                                     |
      *| TEST CASE VERSION: 202                                        |
      *+---------------------------------------------------------------+
       IDENTIFICATION DIVISION.
       PROGRAM-ID. 'BZU_TERM'.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 AZ-TEST-NAME-LEN      PIC S9(9) COMP-5.
       01 BZUASSRT      PIC X(8) VALUE 'BZUASSRT'.
       01 BZ-P1         PIC S9(9) COMP-4 VALUE 4.
       01 BZ-P2         PIC S9(9) COMP-4 VALUE 2001.
       01 BZ-P3         PIC X(3) VALUE 'AZU'.
       01 BZ-ASSERT.
         03 MESSAGE-LEN PIC S9(4) COMP-4 VALUE 24.
         03 MESSAGE-TXT PIC X(254) VALUE 'HELLO FROM TEST CALLBACK'.
       01 AZ-TEST-NAME              PIC X(80).
       01 AZ-TEST-NAME-LENG         PIC S9(8) COMP.
       01 BZ-TRACE.
         03 TRACE-LEN       PIC S9(4) COMP-4 VALUE 5.
         03 TRACE-TXT       PIC X(254) VALUE 'TRACE'.
       01 BZUTRACE          PIC X(8) VALUE 'BZUTRACE'.
       01 AZ-GRP-INDEX        PIC 9(8).
       01 AZ-FLAG-IN          PIC 9(1).
       01 AZ-RECORD-PTR       POINTER.
       01 AZ-RC-WORK          PIC S9(4) USAGE BINARY.
       01 AZ-OUTPUT-COUNT-STR PIC X(5).
       LINKAGE SECTION.
       01 AZ-TEST               PIC X(80).
       01 AZ-INFO-BLOCK.
           COPY EQAITERC.
       01 AZ-RECORD-COUNT     PIC 9(5) COMP-5.
       PROCEDURE DIVISION USING AZ-TEST
                                AZ-INFO-BLOCK.
           MOVE 0 TO AZ-TEST-NAME-LEN.
           INSPECT AZ-TEST TALLYING AZ-TEST-NAME-LEN FOR
           CHARACTERS BEFORE INITIAL SPACE.
      * EVALUATE RECORD COUNT
           MOVE 4 TO RETURN-CODE.
           EVALUATE AZ-TEST(1:AZ-TEST-NAME-LEN)
           WHEN SPACE
             CONTINUE
           WHEN 'TEST1'
             PERFORM CHECK-REC-TEST1
             MOVE 0 TO RETURN-CODE
           WHEN OTHER
             CONTINUE
           END-EVALUATE.
           DISPLAY 'AZU0000I BZU_TERM: ' AZ-TEST(1:AZ-TEST-NAME-LEN)
           GOBACK.
       CHECK-REC-TEST1.
      * CHECK RECORD COUNT FOR TEST1
      * FOR CICS ABEND
           MOVE 1 TO AZ-GRP-INDEX
           MOVE 0 TO AZ-FLAG-IN
           MOVE RETURN-CODE TO AZ-RC-WORK
           CALL 'GTMEMRC' USING TC-WORK-AREA OF AZ-INFO-BLOCK
             AZ-GRP-INDEX AZ-FLAG-IN AZ-RECORD-PTR
           SET ADDRESS OF AZ-RECORD-COUNT TO AZ-RECORD-PTR
           MOVE AZ-RC-WORK TO RETURN-CODE
           IF AZ-RECORD-COUNT NOT EQUAL 0 THEN
             MOVE 1 TO MESSAGE-LEN OF BZ-ASSERT
             MOVE AZ-RECORD-COUNT TO AZ-OUTPUT-COUNT-STR
             STRING
               'EXPECTED RECORD COUNT IS ''0''. '
               'BUT REAL RECORD COUNT IS ''' AZ-OUTPUT-COUNT-STR ''''
               ' IN CICS ABEND.'
               DELIMITED BY SIZE INTO MESSAGE-TXT OF BZ-ASSERT
               WITH POINTER MESSAGE-LEN OF BZ-ASSERT
             END-STRING
             SUBTRACT 1 FROM MESSAGE-LEN OF BZ-ASSERT
             PERFORM THROW-ASSERTION-M
           END-IF.
      * FOR CICS ASKTIME
           MOVE 3 TO AZ-GRP-INDEX
           MOVE 0 TO AZ-FLAG-IN
           MOVE RETURN-CODE TO AZ-RC-WORK
           CALL 'GTMEMRC' USING TC-WORK-AREA OF AZ-INFO-BLOCK
             AZ-GRP-INDEX AZ-FLAG-IN AZ-RECORD-PTR
           SET ADDRESS OF AZ-RECORD-COUNT TO AZ-RECORD-PTR
           MOVE AZ-RC-WORK TO RETURN-CODE
           IF AZ-RECORD-COUNT NOT EQUAL 0 THEN
             MOVE 1 TO MESSAGE-LEN OF BZ-ASSERT
             MOVE AZ-RECORD-COUNT TO AZ-OUTPUT-COUNT-STR
             STRING
               'EXPECTED RECORD COUNT IS ''0''. '
               'BUT REAL RECORD COUNT IS ''' AZ-OUTPUT-COUNT-STR ''''
               ' IN CICS ASKTIME.'
               DELIMITED BY SIZE INTO MESSAGE-TXT OF BZ-ASSERT
               WITH POINTER MESSAGE-LEN OF BZ-ASSERT
             END-STRING
             SUBTRACT 1 FROM MESSAGE-LEN OF BZ-ASSERT
             PERFORM THROW-ASSERTION-M
           END-IF.
      * FOR CICS FORMATTIME
           MOVE 4 TO AZ-GRP-INDEX
           MOVE 0 TO AZ-FLAG-IN
           MOVE RETURN-CODE TO AZ-RC-WORK
           CALL 'GTMEMRC' USING TC-WORK-AREA OF AZ-INFO-BLOCK
             AZ-GRP-INDEX AZ-FLAG-IN AZ-RECORD-PTR
           SET ADDRESS OF AZ-RECORD-COUNT TO AZ-RECORD-PTR
           MOVE AZ-RC-WORK TO RETURN-CODE
           IF AZ-RECORD-COUNT NOT EQUAL 0 THEN
             MOVE 1 TO MESSAGE-LEN OF BZ-ASSERT
             MOVE AZ-RECORD-COUNT TO AZ-OUTPUT-COUNT-STR
             STRING
               'EXPECTED RECORD COUNT IS ''0''. '
               'BUT REAL RECORD COUNT IS ''' AZ-OUTPUT-COUNT-STR ''''
               ' IN CICS FORMATTIME.'
               DELIMITED BY SIZE INTO MESSAGE-TXT OF BZ-ASSERT
               WITH POINTER MESSAGE-LEN OF BZ-ASSERT
             END-STRING
             SUBTRACT 1 FROM MESSAGE-LEN OF BZ-ASSERT
             PERFORM THROW-ASSERTION-M
           END-IF.
      * FOR CICS LINK ''LGSTSQ''
           MOVE 5 TO AZ-GRP-INDEX
           MOVE 0 TO AZ-FLAG-IN
           MOVE RETURN-CODE TO AZ-RC-WORK
           CALL 'GTMEMRC' USING TC-WORK-AREA OF AZ-INFO-BLOCK
             AZ-GRP-INDEX AZ-FLAG-IN AZ-RECORD-PTR
           SET ADDRESS OF AZ-RECORD-COUNT TO AZ-RECORD-PTR
           MOVE AZ-RC-WORK TO RETURN-CODE
           IF AZ-RECORD-COUNT NOT EQUAL 0 THEN
             MOVE 1 TO MESSAGE-LEN OF BZ-ASSERT
             MOVE AZ-RECORD-COUNT TO AZ-OUTPUT-COUNT-STR
             STRING
               'EXPECTED RECORD COUNT IS ''0''. '
               'BUT REAL RECORD COUNT IS ''' AZ-OUTPUT-COUNT-STR ''''
               ' IN CICS LINK ''LGSTSQ''.'
               DELIMITED BY SIZE INTO MESSAGE-TXT OF BZ-ASSERT
               WITH POINTER MESSAGE-LEN OF BZ-ASSERT
             END-STRING
             SUBTRACT 1 FROM MESSAGE-LEN OF BZ-ASSERT
             PERFORM THROW-ASSERTION-M
           END-IF.
      * FOR SQL SELECT_INTO ''CUSTOMER''
           MOVE 6 TO AZ-GRP-INDEX
           MOVE 0 TO AZ-FLAG-IN
           MOVE RETURN-CODE TO AZ-RC-WORK
           CALL 'GTMEMRC' USING TC-WORK-AREA OF AZ-INFO-BLOCK
             AZ-GRP-INDEX AZ-FLAG-IN AZ-RECORD-PTR
           SET ADDRESS OF AZ-RECORD-COUNT TO AZ-RECORD-PTR
           MOVE AZ-RC-WORK TO RETURN-CODE
           IF AZ-RECORD-COUNT NOT EQUAL 1 THEN
             MOVE 1 TO MESSAGE-LEN OF BZ-ASSERT
             MOVE AZ-RECORD-COUNT TO AZ-OUTPUT-COUNT-STR
             STRING
               'EXPECTED RECORD COUNT IS ''1''. '
               'BUT REAL RECORD COUNT IS ''' AZ-OUTPUT-COUNT-STR ''''
               ' IN SQL SELECT_INTO ''CUSTOMER''.'
               DELIMITED BY SIZE INTO MESSAGE-TXT OF BZ-ASSERT
               WITH POINTER MESSAGE-LEN OF BZ-ASSERT
             END-STRING
             SUBTRACT 1 FROM MESSAGE-LEN OF BZ-ASSERT
             PERFORM THROW-ASSERTION-M
           END-IF.
           EXIT.
       THROW-ASSERTION-M.
           DISPLAY 'AZU0000I *******************************************
      -    '*************************************'
           DISPLAY 'AZU2001W THE TEST "' AZ-TEST(1:AZ-TEST-NAME-LEN) '"
      -    'FAILED DUE TO AN ASSERTION.'
           DISPLAY 'AZU1101I ' MESSAGE-TXT OF BZ-ASSERT(1:MESSAGE-LEN
           OF BZ-ASSERT)
           DISPLAY 'AZU0000I *******************************************
      -    '*************************************'
           CALL BZUASSRT USING BZ-P1 BZ-P2 BZ-P3 BZ-ASSERT
           EXIT.
       END PROGRAM BZU_TERM.
      *+---------------------------------------------------------------+
      *| UNIT TEST FOR Z/OS: EVALOPT                                   |
      *|   EVALUATE THE BIT OF CICS OPTION DATA                        |
      *|   (1) TAKE AND OF GROUP COMMON MASK AND OPTION IN ARG0        |
      *|   (2) CHECK IF THE GROUP MASK IS EQUAL TO (1)                 |
      *|       IF EQUAL,    RTN01 IS 0                                 |
      *|       IF NO EQUAL, RTN01 IS 1                                 |
      *| TEST CASE VERSION: 202                                        |
      *+---------------------------------------------------------------+
       ID DIVISION.
       PROGRAM-ID. EVALOPT.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  OUT1-REC.
         05 OUT1-DATA                PIC X(1) OCCURS 8.
       01 OUT1-DATA-R REDEFINES OUT1-REC.
         05 OUT1-DATA-UP             PIC X(4).
         05 OUT1-DATA-DOWN           PIC X(4).
       01  OUT2-REC.
         05  OUT2-DATA               PIC X(1) OCCURS 8.
       01  OUT2-DATA-R REDEFINES OUT2-REC.
         05 OUT2-DATA-UP             PIC X(4).
         05 OUT2-DATA-DOWN           PIC X(4).
       01  WORK1-REC.
         05  WORK1-DATA              PIC X(1) OCCURS 8.
       01  WORK1-DATA-R REDEFINES WORK1-REC.
         05 WORK1-DATA-UP            PIC X(4).
         05 WORK1-DATA-DOWN          PIC X(4).
       01  WORK-AREA.
         05  WORK-HEX-UP             PIC 9(4)  COMP.
         05  WORK-HEX-DOWN           PIC 9(4)  COMP.
       01  HEX-CHG-BEF.
         05  HEX-CHANGE-LV           PIC X(1) VALUE LOW-VALUE.
         05  HEX-CHANGE-BEFORE       PIC X(1).
       01  HEX-CHG-AFT      REDEFINES  HEX-CHG-BEF.
         05  HEX-CHANGE-AFTER        PIC 9(4)  COMP.
       01  TBL-CHANGE-DATA.
          05  FILLER                 PIC  X(004) VALUE '0000'.
          05  FILLER                 PIC  X(001) VALUE '0'.
          05  FILLER                 PIC  X(004) VALUE '0001'.
          05  FILLER                 PIC  X(001) VALUE '1'.
          05  FILLER                 PIC  X(004) VALUE '0010'.
          05  FILLER                 PIC  X(001) VALUE '2'.
          05  FILLER                 PIC  X(004) VALUE '0011'.
          05  FILLER                 PIC  X(001) VALUE '3'.
          05  FILLER                 PIC  X(004) VALUE '0100'.
          05  FILLER                 PIC  X(001) VALUE '4'.
          05  FILLER                 PIC  X(004) VALUE '0101'.
          05  FILLER                 PIC  X(001) VALUE '5'.
          05  FILLER                 PIC  X(004) VALUE '0110'.
          05  FILLER                 PIC  X(001) VALUE '6'.
          05  FILLER                 PIC  X(004) VALUE '0111'.
          05  FILLER                 PIC  X(001) VALUE '7'.
          05  FILLER                 PIC  X(004) VALUE '1000'.
          05  FILLER                 PIC  X(001) VALUE '8'.
          05  FILLER                 PIC  X(004) VALUE '1001'.
          05  FILLER                 PIC  X(001) VALUE '9'.
          05  FILLER                 PIC  X(004) VALUE '1010'.
          05  FILLER                 PIC  X(001) VALUE 'A'.
          05  FILLER                 PIC  X(004) VALUE '1011'.
          05  FILLER                 PIC  X(001) VALUE 'B'.
          05  FILLER                 PIC  X(004) VALUE '1100'.
          05  FILLER                 PIC  X(001) VALUE 'C'.
          05  FILLER                 PIC  X(004) VALUE '1101'.
          05  FILLER                 PIC  X(001) VALUE 'D'.
          05  FILLER                 PIC  X(004) VALUE '1110'.
          05  FILLER                 PIC  X(001) VALUE 'E'.
          05  FILLER                 PIC  X(004) VALUE '1111'.
          05  FILLER                 PIC  X(001) VALUE 'F'.
          01  TBL-DATA REDEFINES TBL-CHANGE-DATA.
           05  TBL-CHG  OCCURS  16 TIMES.
             10  TBL-BIT-CHAR        PIC  X(004).
             10  TBL-HEX-CHAR        PIC  X(001).
       01 BIT-COUNT                  PIC 9(1).
       01 I                          PIC S9(8) COMP.
       LINKAGE SECTION.
       01 G-MASK.
         03 D-G-MASK                 PIC X(1) OCCURS 19.
       01 COM-MASK.
         03 D-COM-MASK               PIC X(1) OCCURS 19.
       01 O-ARG0.
         03 D-O-ARG0                 PIC X(1) OCCURS 19.
       01 BYTE-COUNT                 PIC S9(8) COMP.
       01 RTN01                      PIC 9(1).
       01 AZ-TEST                    PIC X(80).
       01 AZ-INFO-BLOCK.
          COPY EQAITERC.
       PROCEDURE DIVISION USING G-MASK COM-MASK O-ARG0 BYTE-COUNT
            RTN01.
       MAINPROC.
      * ENTRY FOR CALLBACK
            ENTRY "PGM_INPT_EVALOPT" USING AZ-TEST AZ-INFO-BLOCK
             G-MASK COM-MASK O-ARG0 BYTE-COUNT RTN01.
      * EVALUATE OPTION
            MOVE 0 TO RTN01
            PERFORM VARYING I FROM 1 BY 1 UNTIL I > BYTE-COUNT
              PERFORM ANDCOMMASK
              IF RTN01 = 1 THEN
                GOBACK
              END-IF
            END-PERFORM.
            EXIT PROGRAM.
       ANDCOMMASK.
      * CONVERT GROUP COMMON MASK TO BIT
            MOVE D-COM-MASK(I) TO HEX-CHANGE-BEFORE.
            DIVIDE 16 INTO HEX-CHANGE-AFTER GIVING WORK-HEX-UP
                                         REMAINDER WORK-HEX-DOWN.
            MOVE TBL-BIT-CHAR(WORK-HEX-UP + 1)   TO OUT1-DATA-UP.
            MOVE TBL-BIT-CHAR(WORK-HEX-DOWN + 1) TO OUT1-DATA-DOWN.
      * CONVERT OPTION IN ARG0 TO BIT
            MOVE D-O-ARG0(I) TO HEX-CHANGE-BEFORE.
            DIVIDE 16 INTO HEX-CHANGE-AFTER GIVING WORK-HEX-UP
                                         REMAINDER WORK-HEX-DOWN.
            MOVE TBL-BIT-CHAR(WORK-HEX-UP + 1)   TO OUT2-DATA-UP.
            MOVE TBL-BIT-CHAR(WORK-HEX-DOWN + 1) TO OUT2-DATA-DOWN.
      * CREATE EVAL BIT FROM GROUP COMMON MASK BIT AND ARG0 BIT
            PERFORM VARYING BIT-COUNT FROM 1 BY 1 UNTIL BIT-COUNT > 8
              IF OUT1-DATA(BIT-COUNT) = '1' AND
                 OUT2-DATA(BIT-COUNT) = '1' THEN
                MOVE '1' TO WORK1-DATA(BIT-COUNT)
              ELSE
                MOVE '0' TO WORK1-DATA(BIT-COUNT)
              END-IF
            END-PERFORM.
      * CONVERT GROUP MASK TO BIT DATA
            MOVE D-G-MASK(I) TO HEX-CHANGE-BEFORE.
            DIVIDE 16 INTO HEX-CHANGE-AFTER GIVING WORK-HEX-UP
                                         REMAINDER WORK-HEX-DOWN.
            MOVE TBL-BIT-CHAR(WORK-HEX-UP + 1)   TO OUT1-DATA-UP.
            MOVE TBL-BIT-CHAR(WORK-HEX-DOWN + 1) TO OUT1-DATA-DOWN.
      * CHECK IF EQUAL BETWEEN EVAL BIT AND GROUP MASK BIT
            IF WORK1-DATA-UP = OUT1-DATA-UP AND
               WORK1-DATA-DOWN = OUT1-DATA-DOWN THEN
              CONTINUE
            ELSE
              MOVE 1 TO RTN01
            END-IF
            EXIT.
       END PROGRAM 'EVALOPT'.
      *+---------------------------------------------------------------+
      *| UNIT TEST FOR Z/OS: GTMEMRC                                   |
      *|     GET DATA AREA FOR RECORD COUNT OF SUBSYSTEM GROUP         |
      *| TEST CASE VERSION: 202                                        |
      *+---------------------------------------------------------------+
       IDENTIFICATION DIVISION.
       PROGRAM-ID. 'GTMEMRC'.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 BZUGTMEM            PIC X(8) VALUE 'BZUGTMEM'.
       01 DATA-SIZE           PIC 9(8) COMP-4.
       LINKAGE SECTION.
       01 AZ-TC-WORK-AREA        PIC X(256).
       01 AZ-GRP-INDEX        PIC 9(8).
       01 AZ-FLAG-IN          PIC 9(1).
       01 AZ-RECORD-PTR       POINTER.
       01 AZ-RECORD-PTR-VALUE
            REDEFINES AZ-RECORD-PTR  PIC S9(9) COMP-5.
       01 DATA-PTR            POINTER.
       01 DATA-PTR-VALUE
            REDEFINES DATA-PTR  PIC S9(9) COMP-5.
       01 DATA-AREA.
         03 RECORD-COUNT-IO OCCURS 6.
           05 RECORD-COUNT-OT PIC 9(5) COMP-5.
           05 RECORD-COUNT-IN PIC 9(5) COMP-5.
       01 WK-RECORD-COUNT     PIC 9(5) COMP-5.
       01 AZ-TEST             PIC X(80).
       01 AZ-INFO-BLOCK.
          COPY EQAITERC.
       PROCEDURE DIVISION USING AZ-TC-WORK-AREA AZ-GRP-INDEX AZ-FLAG-IN
           AZ-RECORD-PTR.
       MAINPROC.
      * ENTRY FOR CALLBACK
           ENTRY "PGM_INPT_GTMEMRC" USING AZ-TEST AZ-INFO-BLOCK
             AZ-TC-WORK-AREA AZ-GRP-INDEX AZ-FLAG-IN AZ-RECORD-PTR.
      * GET DATA AREA
           SET ADDRESS OF DATA-PTR TO ADDRESS OF AZ-TC-WORK-AREA.
           IF DATA-PTR-VALUE = 0 THEN
             COMPUTE DATA-SIZE = LENGTH OF WK-RECORD-COUNT * 2 * 6
             CALL BZUGTMEM USING DATA-SIZE RETURNING DATA-PTR
             SET ADDRESS OF DATA-AREA TO DATA-PTR
             DISPLAY 'AZU0000I AREA ALLOCATED FOR RECORD COUNT:'
           DATA-SIZE
           END-IF
           SET AZ-RECORD-PTR TO DATA-PTR
           COMPUTE AZ-RECORD-PTR-VALUE = AZ-RECORD-PTR-VALUE +
                 LENGTH OF WK-RECORD-COUNT * 2 * (AZ-GRP-INDEX - 1)
           IF AZ-FLAG-IN = 1 THEN
             ADD LENGTH OF WK-RECORD-COUNT TO AZ-RECORD-PTR-VALUE
           END-IF
           SET ADDRESS OF WK-RECORD-COUNT TO AZ-RECORD-PTR
           GOBACK.
       END PROGRAM 'GTMEMRC'.
      *+---------------------------------------------------------------+
      *| UNIT TEST FOR Z/OS: AZU_GENERIC_CICS                          |
      *|   GENERIC CICS CALLBACK EXIT POINT                            |
      *| TEST CASE VERSION: 202                                        |
      *+---------------------------------------------------------------+
       IDENTIFICATION DIVISION.
       PROGRAM-ID. 'AZU_GENERIC_CICS'.
       DATA DIVISION.
       LINKAGE SECTION.
       01 AZ-TEST                   PIC X(80).
       01 AZ-INFO-BLOCK.
          COPY EQAITERC.
       PROCEDURE DIVISION.
      * CHECK OUTPUT VALUE
      * CICS_INPT.
           ENTRY 'CICS_INPT' USING AZ-TEST
                                   AZ-INFO-BLOCK.
           DISPLAY 'AZU0000I CICS_INPT ...'
           MOVE 4 TO RETURN-CODE.
           GOBACK.
      * CICS_OUTP.
           ENTRY 'CICS_OUTP' USING AZ-TEST
                                   AZ-INFO-BLOCK.
           DISPLAY 'AZU0000I CICS_OUTP ...'
           MOVE 4 TO RETURN-CODE.
           GOBACK.
      * CICS_INPT_0E08 FOR RETURN.
           ENTRY 'CICS_INPT_0E08' USING AZ-TEST
                                        AZ-INFO-BLOCK.
           DISPLAY 'AZU0000I CICS_INPT_0E08 ...'
           MOVE 0 TO RETURN-CODE.
           GOBACK.
       END PROGRAM 'AZU_GENERIC_CICS'.
      *+---------------------------------------------------------------+
      *| UNIT TEST FOR Z/OS: AZU_GENERIC_DB2                           |
      *|   GENERIC DB2 CALLBACK EXIT POINT                             |
      *| TEST CASE VERSION: 202                                        |
      *+---------------------------------------------------------------+
       IDENTIFICATION DIVISION.
       PROGRAM-ID. 'AZU_GENERIC_DB2'.
       DATA DIVISION.
       LINKAGE SECTION.
       01 AZ-TEST                   PIC X(80).
       01 AZ-INFO-BLOCK.
          COPY EQAITERC.
       PROCEDURE DIVISION.
      * CHECK OUTPUT VALUE
      * DB2_INPT.
           ENTRY 'DB2_INPT' USING AZ-TEST
                                  AZ-INFO-BLOCK.
           DISPLAY 'AZU0000I DB2_INPT ...'
           MOVE 4 TO RETURN-CODE.
           GOBACK.
      * DB2_OUTP.
           ENTRY 'DB2_OUTP' USING AZ-TEST
                                  AZ-INFO-BLOCK.
           DISPLAY 'AZU0000I DB2_OUTP ...'
           MOVE 4 TO RETURN-CODE.
           GOBACK.
       END PROGRAM 'AZU_GENERIC_DB2'.
      *+---------------------------------------------------------------+
      *| UNIT TEST FOR Z/OS: EXEC CICS ABEND                           |
      *|    FUNCTION CODE: 0E0C                                        |
      *| TEST CASE VERSION: 202                                        |
      *+---------------------------------------------------------------+
       IDENTIFICATION DIVISION.
       PROGRAM-ID. 'CICS_0E0C_LGICDB01'.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 BZ-ASSERT.
         03 MESSAGE-LEN PIC S9(4) COMP-4 VALUE 24.
         03 MESSAGE-TXT PIC X(254) VALUE 'HELLO FROM CICS CALLBACK'.
       01  BZ-P1 PIC S9(9) COMP-4 VALUE 4.
       01  BZ-P2 PIC S9(9) COMP-4 VALUE 2001.
       01  BZ-P3 PIC X(3) VALUE 'AZU'.
       01 BZ-TRACE.
         03 TRACE-LEN       PIC S9(4) COMP-4 VALUE 5.
         03 TRACE-TXT       PIC X(254) VALUE 'TRACE'.
       01 BZUASSRT          PIC X(8) VALUE 'BZUASSRT'.
       01 BZUTRACE          PIC X(8) VALUE 'BZUTRACE'.
       01 AZ-TRACE-PTR      POINTER.
       01 AZ-TEST-LEN       PIC S9(8) COMP.
       01 AZ-RECORD.
         03 AZ-RECORD-COUNT-OT OCCURS 1 PIC 9(5) COMP-5 VALUE 0.
         03 AZ-RECORD-COUNT-IN OCCURS 1 PIC 9(5) COMP-5 VALUE 0.
       01 AZ-GRP-INDEX       PIC 9(8).
       01 AZ-FLAG-IN         PIC 9(1).
       01 AZ-RECORD-PTR      POINTER.
       01 AZ-OPT-MASK-DATA2  PIC X(2).
       01 AZ-OPT-MASK-DATA9  PIC X(9).
       01 AZ-OPT-MASK-DATA11 PIC X(11).
       01 AZ-OPT-MASK-DATA19 PIC X(19).
       01 AZ-OPT-BYTECOUNT   PIC S9(8) COMP.
       01 AZ-OPT-RC          PIC 9(1) VALUE 0.
       01 AZ-OPT-COMMASK.
         03  AZ-OPT-COMMASK-DATA2  PIC X(2) OCCURS 1.
         03  AZ-OPT-COMMASK-DATA9  PIC X(9) OCCURS 1.
         03  AZ-OPT-COMMASK-DATA11 PIC X(11) OCCURS 1.
         03  AZ-OPT-COMMASK-DATA19 PIC X(19) OCCURS 1.
       01 AZ-LINE-BYTE      PIC S9(2) COMP.
       01 AZ-LINE-NUM       PIC 9(5).
       01 AZ-LINE-NUM-R   REDEFINES AZ-LINE-NUM.
         03 AZ-LINE-NUM-RD  PIC 9(1) OCCURS 5.
       01 AZ-LINE-I         PIC S9(8) COMP.
       01 AZ-LINE-J         PIC S9(8) COMP.
       01 AZ-RC-WORK        PIC S9(4) USAGE BINARY.
       LOCAL-STORAGE SECTION.
       LINKAGE SECTION.
       01 AZ-TEST                   PIC X(80).
       01 AZ-INFO-BLOCK.
          COPY EQAITERC.
       01 AZ-WK-RECORD-COUNT PIC 9(5) COMP-5.
       01 AZ-MODX                   PIC X(4).
       01 AZ-DFHEIBLK.
         03 FILLER                  PIC X(85).
       01 AZ-DFHCOMMAREA.
         03 FILLER                  PIC X(1).
       01 ARG0.
         03 ARG0-1        PIC X(2).
         03 ARG0-A        PIC X(28).
         03 ARG0-B REDEFINES ARG0-A.
           05 ARG0-2      PIC X(9).
           05 FILLER      PIC X(19).
         03 ARG0-C REDEFINES ARG0-A.
           05 FILLER      PIC X(6).
           05 ARG0-D.
             07 ARG0-3    PIC 9(1) OCCURS 22.
       01 ARG1            POINTER.
       01 AZ-CICS-TARGET-NAME-DEF4 PIC X(4).
       01 AZ-CICS-TARGET-NAME-DEF7 PIC X(7).
       01 AZ-CICS-TARGET-NAME-DEF8 PIC X(8).
      *  *** DFHEIBLK : ZUT0000008B
       1 ZUT0000008B.
      *    *** EIBTIME : ZUT0000008C
         2 ZUT0000008C PICTURE S9(7) USAGE COMPUTATIONAL-3.
      *    *** EIBDATE : ZUT0000008D
         2 ZUT0000008D PICTURE S9(7) USAGE COMPUTATIONAL-3.
      *    *** EIBTRNID : ZUT0000008E
         2 ZUT0000008E PICTURE X(4).
      *    *** EIBTASKN : ZUT0000008F
         2 ZUT0000008F PICTURE S9(7) USAGE COMPUTATIONAL-3.
      *    *** EIBTRMID : ZUT00000090
         2 ZUT00000090 PICTURE X(4).
      *    *** DFHEIGDI : ZUT00000091
         2 ZUT00000091 PICTURE S9(4) USAGE COMPUTATIONAL-5.
      *    *** EIBCPOSN : ZUT00000092
         2 ZUT00000092 PICTURE S9(4) USAGE COMPUTATIONAL-5.
      *    *** EIBCALEN : ZUT00000093
         2 ZUT00000093 PICTURE S9(4) USAGE COMPUTATIONAL-5.
      *    *** EIBAID : ZUT00000094
         2 ZUT00000094 PICTURE X(1).
      *    *** EIBFN : ZUT00000095
         2 ZUT00000095 PICTURE X(2).
      *    *** EIBRCODE : ZUT00000096
         2 ZUT00000096 PICTURE X(6).
      *    *** EIBDS : ZUT00000097
         2 ZUT00000097 PICTURE X(8).
      *    *** EIBREQID : ZUT00000098
         2 ZUT00000098 PICTURE X(8).
      *    *** EIBRSRCE : ZUT00000099
         2 ZUT00000099 PICTURE X(8).
      *    *** EIBSYNC : ZUT0000009A
         2 ZUT0000009A PICTURE X.
      *    *** EIBFREE : ZUT0000009B
         2 ZUT0000009B PICTURE X.
      *    *** EIBRECV : ZUT0000009C
         2 ZUT0000009C PICTURE X.
      *    *** EIBSEND : ZUT0000009D
         2 ZUT0000009D PICTURE X.
      *    *** EIBATT : ZUT0000009E
         2 ZUT0000009E PICTURE X.
      *    *** EIBEOC : ZUT0000009F
         2 ZUT0000009F PICTURE X.
      *    *** EIBFMH : ZUT000000A0
         2 ZUT000000A0 PICTURE X.
      *    *** EIBCOMPL : ZUT000000A1
         2 ZUT000000A1 PICTURE X(1).
      *    *** EIBSIG : ZUT000000A2
         2 ZUT000000A2 PICTURE X(1).
      *    *** EIBCONF : ZUT000000A3
         2 ZUT000000A3 PICTURE X(1).
      *    *** EIBERR : ZUT000000A4
         2 ZUT000000A4 PICTURE X(1).
      *    *** EIBERRCD : ZUT000000A5
         2 ZUT000000A5 PICTURE X(4).
      *    *** EIBSYNRB : ZUT000000A6
         2 ZUT000000A6 PICTURE X.
      *    *** EIBNODAT : ZUT000000A7
         2 ZUT000000A7 PICTURE X.
      *    *** EIBRESP : ZUT000000A8
         2 ZUT000000A8 PICTURE S9(8) USAGE COMPUTATIONAL.
      *    *** EIBRESP2 : ZUT000000A9
         2 ZUT000000A9 PICTURE S9(8) USAGE COMPUTATIONAL.
      *    *** EIBRLDBK : ZUT000000AA
         2 ZUT000000AA PICTURE X(1).
       PROCEDURE DIVISION.
      * CHECK OUTPUT VALUE
      * CICS_INPT_0E0C_LGICDB01.
           ENTRY 'CICS_INPT_0E0C_LGICDB01' USING AZ-TEST
           AZ-INFO-BLOCK ZUT0000008B AZ-DFHCOMMAREA ARG0 ARG1.
           DISPLAY 'AZU0000I CICS_0E0C_LGICDB01 CHECK VALUES...'
           MOVE 4 TO RETURN-CODE.
           MOVE 0 TO AZ-TEST-LEN.
           INSPECT AZ-TEST TALLYING AZ-TEST-LEN FOR
           CHARACTERS BEFORE INITIAL SPACE.
      * SET GROUP OPTION COMMON MASK IN CICS GROUP
           MOVE X'8000' TO AZ-OPT-COMMASK-DATA2(1).
      * EXEC CICS ABEND X'8000'
           IF ARG0-1 = X'0E0C'
             MOVE X'8000' TO AZ-OPT-MASK-DATA2
             MOVE 2 TO AZ-OPT-BYTECOUNT
             MOVE RETURN-CODE TO AZ-RC-WORK
             CALL 'EVALOPT' USING AZ-OPT-MASK-DATA2
               AZ-OPT-COMMASK-DATA2(1) ARG0-2
               AZ-OPT-BYTECOUNT AZ-OPT-RC
             MOVE AZ-RC-WORK TO RETURN-CODE
             IF AZ-OPT-RC = 0 THEN
               MOVE 3 TO AZ-LINE-BYTE
               PERFORM GETLINENUM
               DISPLAY 'AZU0000I EXEC CICS ABEND X''8000'''
                ' L=' AZ-LINE-NUM
               MOVE 1 TO AZ-GRP-INDEX
               MOVE 0 TO AZ-FLAG-IN
               MOVE RETURN-CODE TO AZ-RC-WORK
               CALL 'GTMEMRC' USING TC-WORK-AREA OF AZ-INFO-BLOCK
                 AZ-GRP-INDEX AZ-FLAG-IN AZ-RECORD-PTR
               SET ADDRESS OF AZ-WK-RECORD-COUNT TO AZ-RECORD-PTR
               MOVE AZ-RC-WORK TO RETURN-CODE
               ADD 1 TO AZ-WK-RECORD-COUNT
               MOVE AZ-WK-RECORD-COUNT TO AZ-RECORD-COUNT-OT(1)
               EVALUATE AZ-TEST(1:AZ-TEST-LEN)
                 WHEN SPACE
                   CONTINUE
                 WHEN OTHER
                   CONTINUE
                 END-EVALUATE
             END-IF
           END-IF.
           PERFORM TEARDOWN.
           GOBACK.
      * SET INPUT VALUE
      * CICS_OUTP_0E0C_LGICDB01.
           ENTRY 'CICS_OUTP_0E0C_LGICDB01' USING AZ-TEST
           AZ-INFO-BLOCK ZUT0000008B AZ-DFHCOMMAREA ARG0 ARG1.
           DISPLAY 'AZU0000I CICS_0E0C_LGICDB01 INPUT VALUES...'
           MOVE 0 TO RETURN-CODE.
           MOVE 0 TO AZ-TEST-LEN.
           INSPECT AZ-TEST TALLYING AZ-TEST-LEN FOR
           CHARACTERS BEFORE INITIAL SPACE.
      * SET GROUP OPTION COMMON MASK IN CICS GROUP
           MOVE X'8000' TO AZ-OPT-COMMASK-DATA2(1).
      * EXEC CICS ABEND X'8000'
           IF ARG0-1 = X'0E0C'
             MOVE X'8000' TO AZ-OPT-MASK-DATA2
             MOVE 2 TO AZ-OPT-BYTECOUNT
             MOVE RETURN-CODE TO AZ-RC-WORK
             CALL 'EVALOPT' USING AZ-OPT-MASK-DATA2
               AZ-OPT-COMMASK-DATA2(1) ARG0-2
               AZ-OPT-BYTECOUNT AZ-OPT-RC
             MOVE AZ-RC-WORK TO RETURN-CODE
             IF AZ-OPT-RC = 0 THEN
               MOVE 3 TO AZ-LINE-BYTE
               PERFORM GETLINENUM
               DISPLAY 'AZU0000I EXEC CICS ABEND X''8000'''
                ' L=' AZ-LINE-NUM
               MOVE 1 TO AZ-GRP-INDEX
               MOVE 1 TO AZ-FLAG-IN
               MOVE RETURN-CODE TO AZ-RC-WORK
               CALL 'GTMEMRC' USING TC-WORK-AREA OF AZ-INFO-BLOCK
                 AZ-GRP-INDEX AZ-FLAG-IN AZ-RECORD-PTR
               SET ADDRESS OF AZ-WK-RECORD-COUNT TO AZ-RECORD-PTR
               MOVE AZ-RC-WORK TO RETURN-CODE
               ADD 1 TO AZ-WK-RECORD-COUNT
               MOVE AZ-WK-RECORD-COUNT TO AZ-RECORD-COUNT-IN(1)
               EVALUATE AZ-TEST(1:AZ-TEST-LEN)
                 WHEN SPACE
                   CONTINUE
                 WHEN OTHER
                   CONTINUE
                 END-EVALUATE
             END-IF
           END-IF.
           PERFORM TEARDOWN.
           GOBACK.
       GETLINENUM.
           MOVE 1 TO AZ-LINE-J
           PERFORM VARYING AZ-LINE-I FROM AZ-LINE-BYTE BY 1
             UNTIL AZ-LINE-I > AZ-LINE-BYTE + 4
             MOVE ARG0-3(AZ-LINE-I) TO AZ-LINE-NUM-RD(AZ-LINE-J)
             ADD 1 TO AZ-LINE-J
           END-PERFORM
           EXIT.
       TEARDOWN.
           DISPLAY 'AZU0000I CICS_0E0C_LGICDB01 END.'
           EXIT.
       END PROGRAM 'CICS_0E0C_LGICDB01'.
      *+---------------------------------------------------------------+
      *| UNIT TEST FOR Z/OS: EXEC CICS RETURN                          |
      *|    FUNCTION CODE: 0E08                                        |
      *| TEST CASE VERSION: 202                                        |
      *+---------------------------------------------------------------+
       IDENTIFICATION DIVISION.
       PROGRAM-ID. 'CICS_0E08_LGICDB01'.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 BZ-ASSERT.
         03 MESSAGE-LEN PIC S9(4) COMP-4 VALUE 24.
         03 MESSAGE-TXT PIC X(254) VALUE 'HELLO FROM CICS CALLBACK'.
       01  BZ-P1 PIC S9(9) COMP-4 VALUE 4.
       01  BZ-P2 PIC S9(9) COMP-4 VALUE 2001.
       01  BZ-P3 PIC X(3) VALUE 'AZU'.
       01 BZ-TRACE.
         03 TRACE-LEN       PIC S9(4) COMP-4 VALUE 5.
         03 TRACE-TXT       PIC X(254) VALUE 'TRACE'.
       01 BZUASSRT          PIC X(8) VALUE 'BZUASSRT'.
       01 BZUTRACE          PIC X(8) VALUE 'BZUTRACE'.
       01 AZ-TRACE-PTR      POINTER.
       01 AZ-TEST-LEN       PIC S9(8) COMP.
       01 AZ-RECORD.
         03 AZ-RECORD-COUNT-OT OCCURS 1 PIC 9(5) COMP-5 VALUE 0.
         03 AZ-RECORD-COUNT-IN OCCURS 1 PIC 9(5) COMP-5 VALUE 0.
       01 AZ-GRP-INDEX       PIC 9(8).
       01 AZ-FLAG-IN         PIC 9(1).
       01 AZ-RECORD-PTR      POINTER.
       01 AZ-OPT-MASK-DATA2  PIC X(2).
       01 AZ-OPT-MASK-DATA9  PIC X(9).
       01 AZ-OPT-MASK-DATA11 PIC X(11).
       01 AZ-OPT-MASK-DATA19 PIC X(19).
       01 AZ-OPT-BYTECOUNT   PIC S9(8) COMP.
       01 AZ-OPT-RC          PIC 9(1) VALUE 0.
       01 AZ-OPT-COMMASK.
         03  AZ-OPT-COMMASK-DATA2  PIC X(2) OCCURS 1.
         03  AZ-OPT-COMMASK-DATA9  PIC X(9) OCCURS 1.
         03  AZ-OPT-COMMASK-DATA11 PIC X(11) OCCURS 1.
         03  AZ-OPT-COMMASK-DATA19 PIC X(19) OCCURS 1.
       01 AZ-LINE-BYTE      PIC S9(2) COMP.
       01 AZ-LINE-NUM       PIC 9(5).
       01 AZ-LINE-NUM-R   REDEFINES AZ-LINE-NUM.
         03 AZ-LINE-NUM-RD  PIC 9(1) OCCURS 5.
       01 AZ-LINE-I         PIC S9(8) COMP.
       01 AZ-LINE-J         PIC S9(8) COMP.
       01 AZ-RC-WORK        PIC S9(4) USAGE BINARY.
       LOCAL-STORAGE SECTION.
       LINKAGE SECTION.
       01 AZ-TEST                   PIC X(80).
       01 AZ-INFO-BLOCK.
          COPY EQAITERC.
       01 AZ-WK-RECORD-COUNT PIC 9(5) COMP-5.
       01 AZ-MODX                   PIC X(4).
       01 AZ-DFHEIBLK.
         03 FILLER                  PIC X(85).
       01 AZ-DFHCOMMAREA.
         03 FILLER                  PIC X(1).
       01 ARG0.
         03 ARG0-1        PIC X(2).
         03 ARG0-A        PIC X(28).
         03 ARG0-B REDEFINES ARG0-A.
           05 ARG0-2      PIC X(9).
           05 FILLER      PIC X(19).
         03 ARG0-C REDEFINES ARG0-A.
           05 FILLER      PIC X(6).
           05 ARG0-D.
             07 ARG0-3    PIC 9(1) OCCURS 22.
       01 ARG1            POINTER.
       01 ARG2            POINTER.
       01 ARG3            POINTER.
       01 ARG4            POINTER.
       01 ARG5            POINTER.
       01 ARG6            POINTER.
       01 ARG7            POINTER.
       01 ARG8            POINTER.
       01 ARG9            POINTER.
       01 ARG10           POINTER.
       01 AZ-CICS-TARGET-NAME-DEF4 PIC X(4).
       01 AZ-CICS-TARGET-NAME-DEF7 PIC X(7).
       01 AZ-CICS-TARGET-NAME-DEF8 PIC X(8).
       PROCEDURE DIVISION.
      * CHECK OUTPUT VALUE
      * CICS_INPT_0E08_LGICDB01.
           ENTRY 'CICS_INPT_0E08_LGICDB01' USING AZ-TEST
           AZ-INFO-BLOCK AZ-DFHEIBLK AZ-DFHCOMMAREA ARG0 ARG1 ARG2
           ARG3 ARG4 ARG5 ARG6 ARG7 ARG8 ARG9 ARG10.
           DISPLAY 'AZU0000I CICS_0E08_LGICDB01 CHECK VALUES...'
           MOVE 4 TO RETURN-CODE.
           MOVE 0 TO AZ-TEST-LEN.
           INSPECT AZ-TEST TALLYING AZ-TEST-LEN FOR
           CHARACTERS BEFORE INITIAL SPACE.
      * SET GROUP OPTION COMMON MASK IN CICS GROUP
           MOVE X'0000' TO AZ-OPT-COMMASK-DATA2(1).
      * EXEC CICS RETURN X'0000'
           IF ARG0-1 = X'0E08'
             MOVE X'0000' TO AZ-OPT-MASK-DATA2
             MOVE 2 TO AZ-OPT-BYTECOUNT
             MOVE RETURN-CODE TO AZ-RC-WORK
             CALL 'EVALOPT' USING AZ-OPT-MASK-DATA2
               AZ-OPT-COMMASK-DATA2(1) ARG0-2
               AZ-OPT-BYTECOUNT AZ-OPT-RC
             MOVE AZ-RC-WORK TO RETURN-CODE
             IF AZ-OPT-RC = 0 THEN
               MOVE 3 TO AZ-LINE-BYTE
               PERFORM GETLINENUM
               DISPLAY 'AZU0000I EXEC CICS RETURN X''0000'''
                ' L=' AZ-LINE-NUM
               MOVE 2 TO AZ-GRP-INDEX
               MOVE 0 TO AZ-FLAG-IN
               MOVE RETURN-CODE TO AZ-RC-WORK
               CALL 'GTMEMRC' USING TC-WORK-AREA OF AZ-INFO-BLOCK
                 AZ-GRP-INDEX AZ-FLAG-IN AZ-RECORD-PTR
               SET ADDRESS OF AZ-WK-RECORD-COUNT TO AZ-RECORD-PTR
               MOVE AZ-RC-WORK TO RETURN-CODE
               ADD 1 TO AZ-WK-RECORD-COUNT
               MOVE AZ-WK-RECORD-COUNT TO AZ-RECORD-COUNT-OT(1)
               EVALUATE AZ-TEST(1:AZ-TEST-LEN)
                 WHEN SPACE
                   CONTINUE
                 WHEN 'TEST1'
                   PERFORM O0E080-TEST1
                   CONTINUE
                 WHEN OTHER
                   CONTINUE
                 END-EVALUATE
             END-IF
           END-IF.
           PERFORM TEARDOWN.
           GOBACK.
      * SET INPUT VALUE
      * CICS_OUTP_0E08_LGICDB01.
           ENTRY 'CICS_OUTP_0E08_LGICDB01' USING AZ-TEST
           AZ-INFO-BLOCK AZ-DFHEIBLK AZ-DFHCOMMAREA ARG0 ARG1 ARG2
           ARG3 ARG4 ARG5 ARG6 ARG7 ARG8 ARG9 ARG10.
           DISPLAY 'AZU0000I CICS_0E08_LGICDB01 INPUT VALUES...'
           MOVE 0 TO RETURN-CODE.
           MOVE 0 TO AZ-TEST-LEN.
           INSPECT AZ-TEST TALLYING AZ-TEST-LEN FOR
           CHARACTERS BEFORE INITIAL SPACE.
      * SET GROUP OPTION COMMON MASK IN CICS GROUP
           MOVE X'0000' TO AZ-OPT-COMMASK-DATA2(1).
      * EXEC CICS RETURN X'0000'
           IF ARG0-1 = X'0E08'
             MOVE X'0000' TO AZ-OPT-MASK-DATA2
             MOVE 2 TO AZ-OPT-BYTECOUNT
             MOVE RETURN-CODE TO AZ-RC-WORK
             CALL 'EVALOPT' USING AZ-OPT-MASK-DATA2
               AZ-OPT-COMMASK-DATA2(1) ARG0-2
               AZ-OPT-BYTECOUNT AZ-OPT-RC
             MOVE AZ-RC-WORK TO RETURN-CODE
             IF AZ-OPT-RC = 0 THEN
               MOVE 3 TO AZ-LINE-BYTE
               PERFORM GETLINENUM
               DISPLAY 'AZU0000I EXEC CICS RETURN X''0000'''
                ' L=' AZ-LINE-NUM
               MOVE 2 TO AZ-GRP-INDEX
               MOVE 1 TO AZ-FLAG-IN
               MOVE RETURN-CODE TO AZ-RC-WORK
               CALL 'GTMEMRC' USING TC-WORK-AREA OF AZ-INFO-BLOCK
                 AZ-GRP-INDEX AZ-FLAG-IN AZ-RECORD-PTR
               SET ADDRESS OF AZ-WK-RECORD-COUNT TO AZ-RECORD-PTR
               MOVE AZ-RC-WORK TO RETURN-CODE
               ADD 1 TO AZ-WK-RECORD-COUNT
               MOVE AZ-WK-RECORD-COUNT TO AZ-RECORD-COUNT-IN(1)
               EVALUATE AZ-TEST(1:AZ-TEST-LEN)
                 WHEN SPACE
                   CONTINUE
                 WHEN 'TEST1'
                   CONTINUE
                 WHEN OTHER
                   CONTINUE
                 END-EVALUATE
             END-IF
           END-IF.
           PERFORM TEARDOWN.
           GOBACK.
       O0E080-TEST1.
           MOVE 0 TO RETURN-CODE
           IF AZ-RECORD-COUNT-OT(1) = 0 THEN
             CONTINUE
           ELSE
             CONTINUE
           END-IF.
       GETLINENUM.
           MOVE 1 TO AZ-LINE-J
           PERFORM VARYING AZ-LINE-I FROM AZ-LINE-BYTE BY 1
             UNTIL AZ-LINE-I > AZ-LINE-BYTE + 4
             MOVE ARG0-3(AZ-LINE-I) TO AZ-LINE-NUM-RD(AZ-LINE-J)
             ADD 1 TO AZ-LINE-J
           END-PERFORM
           EXIT.
       TEARDOWN.
           DISPLAY 'AZU0000I CICS_0E08_LGICDB01 END.'
           EXIT.
       END PROGRAM 'CICS_0E08_LGICDB01'.
      *+---------------------------------------------------------------+
      *| UNIT TEST FOR Z/OS: EXEC CICS ASKTIME                         |
      *|    FUNCTION CODE: 4A02                                        |
      *| TEST CASE VERSION: 202                                        |
      *+---------------------------------------------------------------+
       IDENTIFICATION DIVISION.
       PROGRAM-ID. 'CICS_4A02_LGICDB01'.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 BZ-ASSERT.
         03 MESSAGE-LEN PIC S9(4) COMP-4 VALUE 24.
         03 MESSAGE-TXT PIC X(254) VALUE 'HELLO FROM CICS CALLBACK'.
       01  BZ-P1 PIC S9(9) COMP-4 VALUE 4.
       01  BZ-P2 PIC S9(9) COMP-4 VALUE 2001.
       01  BZ-P3 PIC X(3) VALUE 'AZU'.
       01 BZ-TRACE.
         03 TRACE-LEN       PIC S9(4) COMP-4 VALUE 5.
         03 TRACE-TXT       PIC X(254) VALUE 'TRACE'.
       01 BZUASSRT          PIC X(8) VALUE 'BZUASSRT'.
       01 BZUTRACE          PIC X(8) VALUE 'BZUTRACE'.
       01 AZ-TRACE-PTR      POINTER.
       01 AZ-TEST-LEN       PIC S9(8) COMP.
       01 AZ-RECORD.
         03 AZ-RECORD-COUNT-OT OCCURS 1 PIC 9(5) COMP-5 VALUE 0.
         03 AZ-RECORD-COUNT-IN OCCURS 1 PIC 9(5) COMP-5 VALUE 0.
       01 AZ-GRP-INDEX       PIC 9(8).
       01 AZ-FLAG-IN         PIC 9(1).
       01 AZ-RECORD-PTR      POINTER.
       01 AZ-OPT-MASK-DATA2  PIC X(2).
       01 AZ-OPT-MASK-DATA9  PIC X(9).
       01 AZ-OPT-MASK-DATA11 PIC X(11).
       01 AZ-OPT-MASK-DATA19 PIC X(19).
       01 AZ-OPT-BYTECOUNT   PIC S9(8) COMP.
       01 AZ-OPT-RC          PIC 9(1) VALUE 0.
       01 AZ-OPT-COMMASK.
         03  AZ-OPT-COMMASK-DATA2  PIC X(2) OCCURS 1.
         03  AZ-OPT-COMMASK-DATA9  PIC X(9) OCCURS 1.
         03  AZ-OPT-COMMASK-DATA11 PIC X(11) OCCURS 1.
         03  AZ-OPT-COMMASK-DATA19 PIC X(19) OCCURS 1.
       01 AZ-LINE-BYTE      PIC S9(2) COMP.
       01 AZ-LINE-NUM       PIC 9(5).
       01 AZ-LINE-NUM-R   REDEFINES AZ-LINE-NUM.
         03 AZ-LINE-NUM-RD  PIC 9(1) OCCURS 5.
       01 AZ-LINE-I         PIC S9(8) COMP.
       01 AZ-LINE-J         PIC S9(8) COMP.
       01 AZ-RC-WORK        PIC S9(4) USAGE BINARY.
       LOCAL-STORAGE SECTION.
       LINKAGE SECTION.
       01 AZ-TEST                   PIC X(80).
       01 AZ-INFO-BLOCK.
          COPY EQAITERC.
       01 AZ-WK-RECORD-COUNT PIC 9(5) COMP-5.
       01 AZ-MODX                   PIC X(4).
       01 AZ-DFHEIBLK.
         03 FILLER                  PIC X(85).
       01 AZ-DFHCOMMAREA.
         03 FILLER                  PIC X(1).
       01 ARG0.
         03 ARG0-1        PIC X(2).
         03 ARG0-A        PIC X(28).
         03 ARG0-B REDEFINES ARG0-A.
           05 ARG0-2      PIC X(9).
           05 FILLER      PIC X(19).
         03 ARG0-C REDEFINES ARG0-A.
           05 FILLER      PIC X(6).
           05 ARG0-D.
             07 ARG0-3    PIC 9(1) OCCURS 22.
       01 ARG1            POINTER.
       01 AZ-CICS-TARGET-NAME-DEF4 PIC X(4).
       01 AZ-CICS-TARGET-NAME-DEF7 PIC X(7).
       01 AZ-CICS-TARGET-NAME-DEF8 PIC X(8).
      *  *** DFHEIBLK : ZUT0000008B
       1 ZUT0000008B.
      *    *** EIBTIME : ZUT0000008C
         2 ZUT0000008C PICTURE S9(7) USAGE COMPUTATIONAL-3.
      *    *** EIBDATE : ZUT0000008D
         2 ZUT0000008D PICTURE S9(7) USAGE COMPUTATIONAL-3.
      *    *** EIBTRNID : ZUT0000008E
         2 ZUT0000008E PICTURE X(4).
      *    *** EIBTASKN : ZUT0000008F
         2 ZUT0000008F PICTURE S9(7) USAGE COMPUTATIONAL-3.
      *    *** EIBTRMID : ZUT00000090
         2 ZUT00000090 PICTURE X(4).
      *    *** DFHEIGDI : ZUT00000091
         2 ZUT00000091 PICTURE S9(4) USAGE COMPUTATIONAL-5.
      *    *** EIBCPOSN : ZUT00000092
         2 ZUT00000092 PICTURE S9(4) USAGE COMPUTATIONAL-5.
      *    *** EIBCALEN : ZUT00000093
         2 ZUT00000093 PICTURE S9(4) USAGE COMPUTATIONAL-5.
      *    *** EIBAID : ZUT00000094
         2 ZUT00000094 PICTURE X(1).
      *    *** EIBFN : ZUT00000095
         2 ZUT00000095 PICTURE X(2).
      *    *** EIBRCODE : ZUT00000096
         2 ZUT00000096 PICTURE X(6).
      *    *** EIBDS : ZUT00000097
         2 ZUT00000097 PICTURE X(8).
      *    *** EIBREQID : ZUT00000098
         2 ZUT00000098 PICTURE X(8).
      *    *** EIBRSRCE : ZUT00000099
         2 ZUT00000099 PICTURE X(8).
      *    *** EIBSYNC : ZUT0000009A
         2 ZUT0000009A PICTURE X.
      *    *** EIBFREE : ZUT0000009B
         2 ZUT0000009B PICTURE X.
      *    *** EIBRECV : ZUT0000009C
         2 ZUT0000009C PICTURE X.
      *    *** EIBSEND : ZUT0000009D
         2 ZUT0000009D PICTURE X.
      *    *** EIBATT : ZUT0000009E
         2 ZUT0000009E PICTURE X.
      *    *** EIBEOC : ZUT0000009F
         2 ZUT0000009F PICTURE X.
      *    *** EIBFMH : ZUT000000A0
         2 ZUT000000A0 PICTURE X.
      *    *** EIBCOMPL : ZUT000000A1
         2 ZUT000000A1 PICTURE X(1).
      *    *** EIBSIG : ZUT000000A2
         2 ZUT000000A2 PICTURE X(1).
      *    *** EIBCONF : ZUT000000A3
         2 ZUT000000A3 PICTURE X(1).
      *    *** EIBERR : ZUT000000A4
         2 ZUT000000A4 PICTURE X(1).
      *    *** EIBERRCD : ZUT000000A5
         2 ZUT000000A5 PICTURE X(4).
      *    *** EIBSYNRB : ZUT000000A6
         2 ZUT000000A6 PICTURE X.
      *    *** EIBNODAT : ZUT000000A7
         2 ZUT000000A7 PICTURE X.
      *    *** EIBRESP : ZUT000000A8
         2 ZUT000000A8 PICTURE S9(8) USAGE COMPUTATIONAL.
      *    *** EIBRESP2 : ZUT000000A9
         2 ZUT000000A9 PICTURE S9(8) USAGE COMPUTATIONAL.
      *    *** EIBRLDBK : ZUT000000AA
         2 ZUT000000AA PICTURE X(1).
       PROCEDURE DIVISION.
      * CHECK OUTPUT VALUE
      * CICS_INPT_4A02_LGICDB01.
           ENTRY 'CICS_INPT_4A02_LGICDB01' USING AZ-TEST
           AZ-INFO-BLOCK ZUT0000008B AZ-DFHCOMMAREA ARG0 ARG1.
           DISPLAY 'AZU0000I CICS_4A02_LGICDB01 CHECK VALUES...'
           MOVE 4 TO RETURN-CODE.
           MOVE 0 TO AZ-TEST-LEN.
           INSPECT AZ-TEST TALLYING AZ-TEST-LEN FOR
           CHARACTERS BEFORE INITIAL SPACE.
      * SET GROUP OPTION COMMON MASK IN CICS GROUP
           MOVE X'8000' TO AZ-OPT-COMMASK-DATA2(1).
      * EXEC CICS ASKTIME X'8000'
           IF ARG0-1 = X'4A02'
             MOVE X'8000' TO AZ-OPT-MASK-DATA2
             MOVE 2 TO AZ-OPT-BYTECOUNT
             MOVE RETURN-CODE TO AZ-RC-WORK
             CALL 'EVALOPT' USING AZ-OPT-MASK-DATA2
               AZ-OPT-COMMASK-DATA2(1) ARG0-2
               AZ-OPT-BYTECOUNT AZ-OPT-RC
             MOVE AZ-RC-WORK TO RETURN-CODE
             IF AZ-OPT-RC = 0 THEN
               MOVE 7 TO AZ-LINE-BYTE
               PERFORM GETLINENUM
               DISPLAY 'AZU0000I EXEC CICS ASKTIME X''8000'''
                ' L=' AZ-LINE-NUM
               MOVE 3 TO AZ-GRP-INDEX
               MOVE 0 TO AZ-FLAG-IN
               MOVE RETURN-CODE TO AZ-RC-WORK
               CALL 'GTMEMRC' USING TC-WORK-AREA OF AZ-INFO-BLOCK
                 AZ-GRP-INDEX AZ-FLAG-IN AZ-RECORD-PTR
               SET ADDRESS OF AZ-WK-RECORD-COUNT TO AZ-RECORD-PTR
               MOVE AZ-RC-WORK TO RETURN-CODE
               ADD 1 TO AZ-WK-RECORD-COUNT
               MOVE AZ-WK-RECORD-COUNT TO AZ-RECORD-COUNT-OT(1)
               EVALUATE AZ-TEST(1:AZ-TEST-LEN)
                 WHEN SPACE
                   CONTINUE
                 WHEN OTHER
                   CONTINUE
                 END-EVALUATE
             END-IF
           END-IF.
           PERFORM TEARDOWN.
           GOBACK.
      * SET INPUT VALUE
      * CICS_OUTP_4A02_LGICDB01.
           ENTRY 'CICS_OUTP_4A02_LGICDB01' USING AZ-TEST
           AZ-INFO-BLOCK ZUT0000008B AZ-DFHCOMMAREA ARG0 ARG1.
           DISPLAY 'AZU0000I CICS_4A02_LGICDB01 INPUT VALUES...'
           MOVE 0 TO RETURN-CODE.
           MOVE 0 TO AZ-TEST-LEN.
           INSPECT AZ-TEST TALLYING AZ-TEST-LEN FOR
           CHARACTERS BEFORE INITIAL SPACE.
      * SET GROUP OPTION COMMON MASK IN CICS GROUP
           MOVE X'8000' TO AZ-OPT-COMMASK-DATA2(1).
      * EXEC CICS ASKTIME X'8000'
           IF ARG0-1 = X'4A02'
             MOVE X'8000' TO AZ-OPT-MASK-DATA2
             MOVE 2 TO AZ-OPT-BYTECOUNT
             MOVE RETURN-CODE TO AZ-RC-WORK
             CALL 'EVALOPT' USING AZ-OPT-MASK-DATA2
               AZ-OPT-COMMASK-DATA2(1) ARG0-2
               AZ-OPT-BYTECOUNT AZ-OPT-RC
             MOVE AZ-RC-WORK TO RETURN-CODE
             IF AZ-OPT-RC = 0 THEN
               MOVE 7 TO AZ-LINE-BYTE
               PERFORM GETLINENUM
               DISPLAY 'AZU0000I EXEC CICS ASKTIME X''8000'''
                ' L=' AZ-LINE-NUM
               MOVE 3 TO AZ-GRP-INDEX
               MOVE 1 TO AZ-FLAG-IN
               MOVE RETURN-CODE TO AZ-RC-WORK
               CALL 'GTMEMRC' USING TC-WORK-AREA OF AZ-INFO-BLOCK
                 AZ-GRP-INDEX AZ-FLAG-IN AZ-RECORD-PTR
               SET ADDRESS OF AZ-WK-RECORD-COUNT TO AZ-RECORD-PTR
               MOVE AZ-RC-WORK TO RETURN-CODE
               ADD 1 TO AZ-WK-RECORD-COUNT
               MOVE AZ-WK-RECORD-COUNT TO AZ-RECORD-COUNT-IN(1)
               EVALUATE AZ-TEST(1:AZ-TEST-LEN)
                 WHEN SPACE
                   CONTINUE
                 WHEN OTHER
                   CONTINUE
                 END-EVALUATE
             END-IF
           END-IF.
           PERFORM TEARDOWN.
           GOBACK.
       GETLINENUM.
           MOVE 1 TO AZ-LINE-J
           PERFORM VARYING AZ-LINE-I FROM AZ-LINE-BYTE BY 1
             UNTIL AZ-LINE-I > AZ-LINE-BYTE + 4
             MOVE ARG0-3(AZ-LINE-I) TO AZ-LINE-NUM-RD(AZ-LINE-J)
             ADD 1 TO AZ-LINE-J
           END-PERFORM
           EXIT.
       TEARDOWN.
           DISPLAY 'AZU0000I CICS_4A02_LGICDB01 END.'
           EXIT.
       END PROGRAM 'CICS_4A02_LGICDB01'.
      *+---------------------------------------------------------------+
      *| UNIT TEST FOR Z/OS: EXEC CICS FORMATTIME                      |
      *|    FUNCTION CODE: 4A04                                        |
      *| TEST CASE VERSION: 202                                        |
      *+---------------------------------------------------------------+
       IDENTIFICATION DIVISION.
       PROGRAM-ID. 'CICS_4A04_LGICDB01'.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 BZ-ASSERT.
         03 MESSAGE-LEN PIC S9(4) COMP-4 VALUE 24.
         03 MESSAGE-TXT PIC X(254) VALUE 'HELLO FROM CICS CALLBACK'.
       01  BZ-P1 PIC S9(9) COMP-4 VALUE 4.
       01  BZ-P2 PIC S9(9) COMP-4 VALUE 2001.
       01  BZ-P3 PIC X(3) VALUE 'AZU'.
       01 BZ-TRACE.
         03 TRACE-LEN       PIC S9(4) COMP-4 VALUE 5.
         03 TRACE-TXT       PIC X(254) VALUE 'TRACE'.
       01 BZUASSRT          PIC X(8) VALUE 'BZUASSRT'.
       01 BZUTRACE          PIC X(8) VALUE 'BZUTRACE'.
       01 AZ-TRACE-PTR      POINTER.
       01 AZ-TEST-LEN       PIC S9(8) COMP.
       01 AZ-RECORD.
         03 AZ-RECORD-COUNT-OT OCCURS 1 PIC 9(5) COMP-5 VALUE 0.
         03 AZ-RECORD-COUNT-IN OCCURS 1 PIC 9(5) COMP-5 VALUE 0.
       01 AZ-GRP-INDEX       PIC 9(8).
       01 AZ-FLAG-IN         PIC 9(1).
       01 AZ-RECORD-PTR      POINTER.
       01 AZ-OPT-MASK-DATA2  PIC X(2).
       01 AZ-OPT-MASK-DATA9  PIC X(9).
       01 AZ-OPT-MASK-DATA11 PIC X(11).
       01 AZ-OPT-MASK-DATA19 PIC X(19).
       01 AZ-OPT-BYTECOUNT   PIC S9(8) COMP.
       01 AZ-OPT-RC          PIC 9(1) VALUE 0.
       01 AZ-OPT-COMMASK.
         03  AZ-OPT-COMMASK-DATA2  PIC X(2) OCCURS 1.
         03  AZ-OPT-COMMASK-DATA9  PIC X(9) OCCURS 1.
         03  AZ-OPT-COMMASK-DATA11 PIC X(11) OCCURS 1.
         03  AZ-OPT-COMMASK-DATA19 PIC X(19) OCCURS 1.
       01 AZ-LINE-BYTE      PIC S9(2) COMP.
       01 AZ-LINE-NUM       PIC 9(5).
       01 AZ-LINE-NUM-R   REDEFINES AZ-LINE-NUM.
         03 AZ-LINE-NUM-RD  PIC 9(1) OCCURS 5.
       01 AZ-LINE-I         PIC S9(8) COMP.
       01 AZ-LINE-J         PIC S9(8) COMP.
       01 AZ-RC-WORK        PIC S9(4) USAGE BINARY.
       LOCAL-STORAGE SECTION.
       LINKAGE SECTION.
       01 AZ-TEST                   PIC X(80).
       01 AZ-INFO-BLOCK.
          COPY EQAITERC.
       01 AZ-WK-RECORD-COUNT PIC 9(5) COMP-5.
       01 AZ-MODX                   PIC X(4).
       01 AZ-DFHEIBLK.
         03 FILLER                  PIC X(85).
       01 AZ-DFHCOMMAREA.
         03 FILLER                  PIC X(1).
       01 ARG0.
         03 ARG0-1        PIC X(2).
         03 ARG0-A        PIC X(28).
         03 ARG0-B REDEFINES ARG0-A.
           05 ARG0-2      PIC X(9).
           05 FILLER      PIC X(19).
         03 ARG0-C REDEFINES ARG0-A.
           05 FILLER      PIC X(6).
           05 ARG0-D.
             07 ARG0-3    PIC 9(1) OCCURS 22.
       01 ARG1            POINTER.
       01 ARG2            POINTER.
       01 ARG3            POINTER.
       01 ARG4            POINTER.
       01 ARG5            POINTER.
       01 ARG6            POINTER.
       01 ARG7            POINTER.
       01 ARG8            POINTER.
       01 ARG9            POINTER.
       01 ARG10           POINTER.
       01 ARG11           POINTER.
       01 ARG12           POINTER.
       01 ARG13           POINTER.
       01 ARG14           POINTER.
       01 ARG15           POINTER.
       01 ARG16           POINTER.
       01 ARG17           POINTER.
       01 ARG18           POINTER.
       01 ARG19           POINTER.
       01 ARG20           POINTER.
       01 ARG21           POINTER.
       01 ARG22           POINTER.
       01 ARG23           POINTER.
       01 ARG24           POINTER.
       01 ARG25           POINTER.
       01 ARG26           POINTER.
       01 AZ-CICS-TARGET-NAME-DEF4 PIC X(4).
       01 AZ-CICS-TARGET-NAME-DEF7 PIC X(7).
       01 AZ-CICS-TARGET-NAME-DEF8 PIC X(8).
      *  *** DFHEIBLK : ZUT0000008B
       1 ZUT0000008B.
      *    *** EIBTIME : ZUT0000008C
         2 ZUT0000008C PICTURE S9(7) USAGE COMPUTATIONAL-3.
      *    *** EIBDATE : ZUT0000008D
         2 ZUT0000008D PICTURE S9(7) USAGE COMPUTATIONAL-3.
      *    *** EIBTRNID : ZUT0000008E
         2 ZUT0000008E PICTURE X(4).
      *    *** EIBTASKN : ZUT0000008F
         2 ZUT0000008F PICTURE S9(7) USAGE COMPUTATIONAL-3.
      *    *** EIBTRMID : ZUT00000090
         2 ZUT00000090 PICTURE X(4).
      *    *** DFHEIGDI : ZUT00000091
         2 ZUT00000091 PICTURE S9(4) USAGE COMPUTATIONAL-5.
      *    *** EIBCPOSN : ZUT00000092
         2 ZUT00000092 PICTURE S9(4) USAGE COMPUTATIONAL-5.
      *    *** EIBCALEN : ZUT00000093
         2 ZUT00000093 PICTURE S9(4) USAGE COMPUTATIONAL-5.
      *    *** EIBAID : ZUT00000094
         2 ZUT00000094 PICTURE X(1).
      *    *** EIBFN : ZUT00000095
         2 ZUT00000095 PICTURE X(2).
      *    *** EIBRCODE : ZUT00000096
         2 ZUT00000096 PICTURE X(6).
      *    *** EIBDS : ZUT00000097
         2 ZUT00000097 PICTURE X(8).
      *    *** EIBREQID : ZUT00000098
         2 ZUT00000098 PICTURE X(8).
      *    *** EIBRSRCE : ZUT00000099
         2 ZUT00000099 PICTURE X(8).
      *    *** EIBSYNC : ZUT0000009A
         2 ZUT0000009A PICTURE X.
      *    *** EIBFREE : ZUT0000009B
         2 ZUT0000009B PICTURE X.
      *    *** EIBRECV : ZUT0000009C
         2 ZUT0000009C PICTURE X.
      *    *** EIBSEND : ZUT0000009D
         2 ZUT0000009D PICTURE X.
      *    *** EIBATT : ZUT0000009E
         2 ZUT0000009E PICTURE X.
      *    *** EIBEOC : ZUT0000009F
         2 ZUT0000009F PICTURE X.
      *    *** EIBFMH : ZUT000000A0
         2 ZUT000000A0 PICTURE X.
      *    *** EIBCOMPL : ZUT000000A1
         2 ZUT000000A1 PICTURE X(1).
      *    *** EIBSIG : ZUT000000A2
         2 ZUT000000A2 PICTURE X(1).
      *    *** EIBCONF : ZUT000000A3
         2 ZUT000000A3 PICTURE X(1).
      *    *** EIBERR : ZUT000000A4
         2 ZUT000000A4 PICTURE X(1).
      *    *** EIBERRCD : ZUT000000A5
         2 ZUT000000A5 PICTURE X(4).
      *    *** EIBSYNRB : ZUT000000A6
         2 ZUT000000A6 PICTURE X.
      *    *** EIBNODAT : ZUT000000A7
         2 ZUT000000A7 PICTURE X.
      *    *** EIBRESP : ZUT000000A8
         2 ZUT000000A8 PICTURE S9(8) USAGE COMPUTATIONAL.
      *    *** EIBRESP2 : ZUT000000A9
         2 ZUT000000A9 PICTURE S9(8) USAGE COMPUTATIONAL.
      *    *** EIBRLDBK : ZUT000000AA
         2 ZUT000000AA PICTURE X(1).
       PROCEDURE DIVISION.
      * CHECK OUTPUT VALUE
      * CICS_INPT_4A04_LGICDB01.
           ENTRY 'CICS_INPT_4A04_LGICDB01' USING AZ-TEST
           AZ-INFO-BLOCK ZUT0000008B AZ-DFHCOMMAREA ARG0 ARG1 ARG2
           ARG3 ARG4 ARG5 ARG6 ARG7 ARG8 ARG9 ARG10 ARG11 ARG12 ARG13
           ARG14 ARG15 ARG16 ARG17 ARG18 ARG19 ARG20 ARG21 ARG22
           ARG23 ARG24 ARG25 ARG26.
           DISPLAY 'AZU0000I CICS_4A04_LGICDB01 CHECK VALUES...'
           MOVE 4 TO RETURN-CODE.
           MOVE 0 TO AZ-TEST-LEN.
           INSPECT AZ-TEST TALLYING AZ-TEST-LEN FOR
           CHARACTERS BEFORE INITIAL SPACE.
      * SET GROUP OPTION COMMON MASK IN CICS GROUP
           MOVE X'800200000008000000' TO AZ-OPT-COMMASK-DATA9(1).
      * EXEC CICS FORMATTIME X'800200000008000000'
           IF ARG0-1 = X'4A04'
             MOVE X'800200000008000000' TO AZ-OPT-MASK-DATA9
             MOVE 9 TO AZ-OPT-BYTECOUNT
             MOVE RETURN-CODE TO AZ-RC-WORK
             CALL 'EVALOPT' USING AZ-OPT-MASK-DATA9
               AZ-OPT-COMMASK-DATA9(1) ARG0-2
               AZ-OPT-BYTECOUNT AZ-OPT-RC
             MOVE AZ-RC-WORK TO RETURN-CODE
             IF AZ-OPT-RC = 0 THEN
               MOVE 7 TO AZ-LINE-BYTE
               PERFORM GETLINENUM
               DISPLAY 'AZU0000I EXEC CICS FORMATTIME X''800200000008000
      -    '000'''
                ' L=' AZ-LINE-NUM
               MOVE 4 TO AZ-GRP-INDEX
               MOVE 0 TO AZ-FLAG-IN
               MOVE RETURN-CODE TO AZ-RC-WORK
               CALL 'GTMEMRC' USING TC-WORK-AREA OF AZ-INFO-BLOCK
                 AZ-GRP-INDEX AZ-FLAG-IN AZ-RECORD-PTR
               SET ADDRESS OF AZ-WK-RECORD-COUNT TO AZ-RECORD-PTR
               MOVE AZ-RC-WORK TO RETURN-CODE
               ADD 1 TO AZ-WK-RECORD-COUNT
               MOVE AZ-WK-RECORD-COUNT TO AZ-RECORD-COUNT-OT(1)
               EVALUATE AZ-TEST(1:AZ-TEST-LEN)
                 WHEN SPACE
                   CONTINUE
                 WHEN OTHER
                   CONTINUE
                 END-EVALUATE
             END-IF
           END-IF.
           PERFORM TEARDOWN.
           GOBACK.
      * SET INPUT VALUE
      * CICS_OUTP_4A04_LGICDB01.
           ENTRY 'CICS_OUTP_4A04_LGICDB01' USING AZ-TEST
           AZ-INFO-BLOCK ZUT0000008B AZ-DFHCOMMAREA ARG0 ARG1 ARG2
           ARG3 ARG4 ARG5 ARG6 ARG7 ARG8 ARG9 ARG10 ARG11 ARG12 ARG13
           ARG14 ARG15 ARG16 ARG17 ARG18 ARG19 ARG20 ARG21 ARG22
           ARG23 ARG24 ARG25 ARG26.
           DISPLAY 'AZU0000I CICS_4A04_LGICDB01 INPUT VALUES...'
           MOVE 0 TO RETURN-CODE.
           MOVE 0 TO AZ-TEST-LEN.
           INSPECT AZ-TEST TALLYING AZ-TEST-LEN FOR
           CHARACTERS BEFORE INITIAL SPACE.
      * SET GROUP OPTION COMMON MASK IN CICS GROUP
           MOVE X'800200000008000000' TO AZ-OPT-COMMASK-DATA9(1).
      * EXEC CICS FORMATTIME X'800200000008000000'
           IF ARG0-1 = X'4A04'
             MOVE X'800200000008000000' TO AZ-OPT-MASK-DATA9
             MOVE 9 TO AZ-OPT-BYTECOUNT
             MOVE RETURN-CODE TO AZ-RC-WORK
             CALL 'EVALOPT' USING AZ-OPT-MASK-DATA9
               AZ-OPT-COMMASK-DATA9(1) ARG0-2
               AZ-OPT-BYTECOUNT AZ-OPT-RC
             MOVE AZ-RC-WORK TO RETURN-CODE
             IF AZ-OPT-RC = 0 THEN
               MOVE 7 TO AZ-LINE-BYTE
               PERFORM GETLINENUM
               DISPLAY 'AZU0000I EXEC CICS FORMATTIME X''800200000008000
      -    '000'''
                ' L=' AZ-LINE-NUM
               MOVE 4 TO AZ-GRP-INDEX
               MOVE 1 TO AZ-FLAG-IN
               MOVE RETURN-CODE TO AZ-RC-WORK
               CALL 'GTMEMRC' USING TC-WORK-AREA OF AZ-INFO-BLOCK
                 AZ-GRP-INDEX AZ-FLAG-IN AZ-RECORD-PTR
               SET ADDRESS OF AZ-WK-RECORD-COUNT TO AZ-RECORD-PTR
               MOVE AZ-RC-WORK TO RETURN-CODE
               ADD 1 TO AZ-WK-RECORD-COUNT
               MOVE AZ-WK-RECORD-COUNT TO AZ-RECORD-COUNT-IN(1)
               EVALUATE AZ-TEST(1:AZ-TEST-LEN)
                 WHEN SPACE
                   CONTINUE
                 WHEN OTHER
                   CONTINUE
                 END-EVALUATE
             END-IF
           END-IF.
           PERFORM TEARDOWN.
           GOBACK.
       GETLINENUM.
           MOVE 1 TO AZ-LINE-J
           PERFORM VARYING AZ-LINE-I FROM AZ-LINE-BYTE BY 1
             UNTIL AZ-LINE-I > AZ-LINE-BYTE + 4
             MOVE ARG0-3(AZ-LINE-I) TO AZ-LINE-NUM-RD(AZ-LINE-J)
             ADD 1 TO AZ-LINE-J
           END-PERFORM
           EXIT.
       TEARDOWN.
           DISPLAY 'AZU0000I CICS_4A04_LGICDB01 END.'
           EXIT.
       END PROGRAM 'CICS_4A04_LGICDB01'.
      *+---------------------------------------------------------------+
      *| UNIT TEST FOR Z/OS: EXEC CICS LINK                            |
      *|    FUNCTION CODE: 0E02                                        |
      *| TEST CASE VERSION: 202                                        |
      *+---------------------------------------------------------------+
       IDENTIFICATION DIVISION.
       PROGRAM-ID. 'CICS_0E02_LGICDB01'.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 BZ-ASSERT.
         03 MESSAGE-LEN PIC S9(4) COMP-4 VALUE 24.
         03 MESSAGE-TXT PIC X(254) VALUE 'HELLO FROM CICS CALLBACK'.
       01  BZ-P1 PIC S9(9) COMP-4 VALUE 4.
       01  BZ-P2 PIC S9(9) COMP-4 VALUE 2001.
       01  BZ-P3 PIC X(3) VALUE 'AZU'.
       01 BZ-TRACE.
         03 TRACE-LEN       PIC S9(4) COMP-4 VALUE 5.
         03 TRACE-TXT       PIC X(254) VALUE 'TRACE'.
       01 BZUASSRT          PIC X(8) VALUE 'BZUASSRT'.
       01 BZUTRACE          PIC X(8) VALUE 'BZUTRACE'.
       01 AZ-TRACE-PTR      POINTER.
       01 AZ-TEST-LEN       PIC S9(8) COMP.
       01 AZ-RECORD.
         03 AZ-RECORD-COUNT-OT OCCURS 1 PIC 9(5) COMP-5 VALUE 0.
         03 AZ-RECORD-COUNT-IN OCCURS 1 PIC 9(5) COMP-5 VALUE 0.
       01 AZ-GRP-INDEX       PIC 9(8).
       01 AZ-FLAG-IN         PIC 9(1).
       01 AZ-RECORD-PTR      POINTER.
       01 AZ-OPT-MASK-DATA2  PIC X(2).
       01 AZ-OPT-MASK-DATA9  PIC X(9).
       01 AZ-OPT-MASK-DATA11 PIC X(11).
       01 AZ-OPT-MASK-DATA19 PIC X(19).
       01 AZ-OPT-BYTECOUNT   PIC S9(8) COMP.
       01 AZ-OPT-RC          PIC 9(1) VALUE 0.
       01 AZ-OPT-COMMASK.
         03  AZ-OPT-COMMASK-DATA2  PIC X(2) OCCURS 1.
         03  AZ-OPT-COMMASK-DATA9  PIC X(9) OCCURS 1.
         03  AZ-OPT-COMMASK-DATA11 PIC X(11) OCCURS 1.
         03  AZ-OPT-COMMASK-DATA19 PIC X(19) OCCURS 1.
       01 AZ-LINE-BYTE      PIC S9(2) COMP.
       01 AZ-LINE-NUM       PIC 9(5).
       01 AZ-LINE-NUM-R   REDEFINES AZ-LINE-NUM.
         03 AZ-LINE-NUM-RD  PIC 9(1) OCCURS 5.
       01 AZ-LINE-I         PIC S9(8) COMP.
       01 AZ-LINE-J         PIC S9(8) COMP.
       01 AZ-RC-WORK        PIC S9(4) USAGE BINARY.
       LOCAL-STORAGE SECTION.
       LINKAGE SECTION.
       01 AZ-TEST                   PIC X(80).
       01 AZ-INFO-BLOCK.
          COPY EQAITERC.
       01 AZ-WK-RECORD-COUNT PIC 9(5) COMP-5.
       01 AZ-MODX                   PIC X(4).
       01 AZ-DFHEIBLK.
         03 FILLER                  PIC X(85).
       01 AZ-DFHCOMMAREA.
         03 FILLER                  PIC X(1).
       01 ARG0.
         03 ARG0-1        PIC X(2).
         03 ARG0-A        PIC X(28).
         03 ARG0-B REDEFINES ARG0-A.
           05 ARG0-2      PIC X(9).
           05 FILLER      PIC X(19).
         03 ARG0-C REDEFINES ARG0-A.
           05 FILLER      PIC X(6).
           05 ARG0-D.
             07 ARG0-3    PIC 9(1) OCCURS 22.
       01 ARG1            POINTER.
       01 ARG2            POINTER.
       01 ARG3            POINTER.
       01 ARG4            POINTER.
       01 ARG5            POINTER.
       01 ARG6            POINTER.
       01 ARG7            POINTER.
       01 ARG8            POINTER.
       01 ARG9            POINTER.
       01 ARG10           POINTER.
       01 AZ-CICS-TARGET-NAME-DEF4 PIC X(4).
       01 AZ-CICS-TARGET-NAME-DEF7 PIC X(7).
       01 AZ-CICS-TARGET-NAME-DEF8 PIC X(8).
      *  *** DFHEIBLK : ZUT0000008B
       1 ZUT0000008B.
      *    *** EIBTIME : ZUT0000008C
         2 ZUT0000008C PICTURE S9(7) USAGE COMPUTATIONAL-3.
      *    *** EIBDATE : ZUT0000008D
         2 ZUT0000008D PICTURE S9(7) USAGE COMPUTATIONAL-3.
      *    *** EIBTRNID : ZUT0000008E
         2 ZUT0000008E PICTURE X(4).
      *    *** EIBTASKN : ZUT0000008F
         2 ZUT0000008F PICTURE S9(7) USAGE COMPUTATIONAL-3.
      *    *** EIBTRMID : ZUT00000090
         2 ZUT00000090 PICTURE X(4).
      *    *** DFHEIGDI : ZUT00000091
         2 ZUT00000091 PICTURE S9(4) USAGE COMPUTATIONAL-5.
      *    *** EIBCPOSN : ZUT00000092
         2 ZUT00000092 PICTURE S9(4) USAGE COMPUTATIONAL-5.
      *    *** EIBCALEN : ZUT00000093
         2 ZUT00000093 PICTURE S9(4) USAGE COMPUTATIONAL-5.
      *    *** EIBAID : ZUT00000094
         2 ZUT00000094 PICTURE X(1).
      *    *** EIBFN : ZUT00000095
         2 ZUT00000095 PICTURE X(2).
      *    *** EIBRCODE : ZUT00000096
         2 ZUT00000096 PICTURE X(6).
      *    *** EIBDS : ZUT00000097
         2 ZUT00000097 PICTURE X(8).
      *    *** EIBREQID : ZUT00000098
         2 ZUT00000098 PICTURE X(8).
      *    *** EIBRSRCE : ZUT00000099
         2 ZUT00000099 PICTURE X(8).
      *    *** EIBSYNC : ZUT0000009A
         2 ZUT0000009A PICTURE X.
      *    *** EIBFREE : ZUT0000009B
         2 ZUT0000009B PICTURE X.
      *    *** EIBRECV : ZUT0000009C
         2 ZUT0000009C PICTURE X.
      *    *** EIBSEND : ZUT0000009D
         2 ZUT0000009D PICTURE X.
      *    *** EIBATT : ZUT0000009E
         2 ZUT0000009E PICTURE X.
      *    *** EIBEOC : ZUT0000009F
         2 ZUT0000009F PICTURE X.
      *    *** EIBFMH : ZUT000000A0
         2 ZUT000000A0 PICTURE X.
      *    *** EIBCOMPL : ZUT000000A1
         2 ZUT000000A1 PICTURE X(1).
      *    *** EIBSIG : ZUT000000A2
         2 ZUT000000A2 PICTURE X(1).
      *    *** EIBCONF : ZUT000000A3
         2 ZUT000000A3 PICTURE X(1).
      *    *** EIBERR : ZUT000000A4
         2 ZUT000000A4 PICTURE X(1).
      *    *** EIBERRCD : ZUT000000A5
         2 ZUT000000A5 PICTURE X(4).
      *    *** EIBSYNRB : ZUT000000A6
         2 ZUT000000A6 PICTURE X.
      *    *** EIBNODAT : ZUT000000A7
         2 ZUT000000A7 PICTURE X.
      *    *** EIBRESP : ZUT000000A8
         2 ZUT000000A8 PICTURE S9(8) USAGE COMPUTATIONAL.
      *    *** EIBRESP2 : ZUT000000A9
         2 ZUT000000A9 PICTURE S9(8) USAGE COMPUTATIONAL.
      *    *** EIBRLDBK : ZUT000000AA
         2 ZUT000000AA PICTURE X(1).
       PROCEDURE DIVISION.
      * CHECK OUTPUT VALUE
      * CICS_INPT_0E02_LGICDB01.
           ENTRY 'CICS_INPT_0E02_LGICDB01' USING AZ-TEST
           AZ-INFO-BLOCK ZUT0000008B AZ-DFHCOMMAREA ARG0 ARG1 ARG2
           ARG3 ARG4 ARG5 ARG6 ARG7 ARG8 ARG9 ARG10.
           DISPLAY 'AZU0000I CICS_0E02_LGICDB01 CHECK VALUES...'
           MOVE 4 TO RETURN-CODE.
           MOVE 0 TO AZ-TEST-LEN.
           INSPECT AZ-TEST TALLYING AZ-TEST-LEN FOR
           CHARACTERS BEFORE INITIAL SPACE.
      * SET GROUP OPTION COMMON MASK IN CICS GROUP
           MOVE X'E000' TO AZ-OPT-COMMASK-DATA2(1).
      * EXEC CICS LINK "LGSTSQ" X'E000'
           IF ARG0-1 = X'0E02'
             SET ADDRESS OF AZ-CICS-TARGET-NAME-DEF8 TO ADDRESS OF ARG1
             MOVE X'E000' TO AZ-OPT-MASK-DATA2
             MOVE 2 TO AZ-OPT-BYTECOUNT
             MOVE RETURN-CODE TO AZ-RC-WORK
             CALL 'EVALOPT' USING AZ-OPT-MASK-DATA2
               AZ-OPT-COMMASK-DATA2(1) ARG0-2
               AZ-OPT-BYTECOUNT AZ-OPT-RC
             MOVE AZ-RC-WORK TO RETURN-CODE
             IF AZ-CICS-TARGET-NAME-DEF8 = 'LGSTSQ' AND
                AZ-OPT-RC = 0 THEN
               MOVE 3 TO AZ-LINE-BYTE
               PERFORM GETLINENUM
               DISPLAY 'AZU0000I EXEC CICS LINK "LGSTSQ" X''E000'''
               ' L=' AZ-LINE-NUM
               MOVE 5 TO AZ-GRP-INDEX
               MOVE 0 TO AZ-FLAG-IN
               MOVE RETURN-CODE TO AZ-RC-WORK
               CALL 'GTMEMRC' USING TC-WORK-AREA OF AZ-INFO-BLOCK
                 AZ-GRP-INDEX AZ-FLAG-IN AZ-RECORD-PTR
               SET ADDRESS OF AZ-WK-RECORD-COUNT TO AZ-RECORD-PTR
               MOVE AZ-RC-WORK TO RETURN-CODE
               ADD 1 TO AZ-WK-RECORD-COUNT
               MOVE AZ-WK-RECORD-COUNT TO AZ-RECORD-COUNT-OT(1)
               EVALUATE AZ-TEST(1:AZ-TEST-LEN)
                 WHEN SPACE
                   CONTINUE
                 WHEN OTHER
                   CONTINUE
                 END-EVALUATE
             END-IF
           END-IF.
           PERFORM TEARDOWN.
           GOBACK.
      * SET INPUT VALUE
      * CICS_OUTP_0E02_LGICDB01.
           ENTRY 'CICS_OUTP_0E02_LGICDB01' USING AZ-TEST
           AZ-INFO-BLOCK ZUT0000008B AZ-DFHCOMMAREA ARG0 ARG1 ARG2
           ARG3 ARG4 ARG5 ARG6 ARG7 ARG8 ARG9 ARG10.
           DISPLAY 'AZU0000I CICS_0E02_LGICDB01 INPUT VALUES...'
           MOVE 0 TO RETURN-CODE.
           MOVE 0 TO AZ-TEST-LEN.
           INSPECT AZ-TEST TALLYING AZ-TEST-LEN FOR
           CHARACTERS BEFORE INITIAL SPACE.
      * SET GROUP OPTION COMMON MASK IN CICS GROUP
           MOVE X'E000' TO AZ-OPT-COMMASK-DATA2(1).
      * EXEC CICS LINK "LGSTSQ" X'E000'
           IF ARG0-1 = X'0E02'
             SET ADDRESS OF AZ-CICS-TARGET-NAME-DEF8 TO ADDRESS OF ARG1
             MOVE X'E000' TO AZ-OPT-MASK-DATA2
             MOVE 2 TO AZ-OPT-BYTECOUNT
             MOVE RETURN-CODE TO AZ-RC-WORK
             CALL 'EVALOPT' USING AZ-OPT-MASK-DATA2
               AZ-OPT-COMMASK-DATA2(1) ARG0-2
               AZ-OPT-BYTECOUNT AZ-OPT-RC
             MOVE AZ-RC-WORK TO RETURN-CODE
             IF AZ-CICS-TARGET-NAME-DEF8 = 'LGSTSQ' AND
                AZ-OPT-RC = 0 THEN
               MOVE 3 TO AZ-LINE-BYTE
               PERFORM GETLINENUM
               DISPLAY 'AZU0000I EXEC CICS LINK "LGSTSQ" X''E000'''
               ' L=' AZ-LINE-NUM
               MOVE 5 TO AZ-GRP-INDEX
               MOVE 1 TO AZ-FLAG-IN
               MOVE RETURN-CODE TO AZ-RC-WORK
               CALL 'GTMEMRC' USING TC-WORK-AREA OF AZ-INFO-BLOCK
                 AZ-GRP-INDEX AZ-FLAG-IN AZ-RECORD-PTR
               SET ADDRESS OF AZ-WK-RECORD-COUNT TO AZ-RECORD-PTR
               MOVE AZ-RC-WORK TO RETURN-CODE
               ADD 1 TO AZ-WK-RECORD-COUNT
               MOVE AZ-WK-RECORD-COUNT TO AZ-RECORD-COUNT-IN(1)
               EVALUATE AZ-TEST(1:AZ-TEST-LEN)
                 WHEN SPACE
                   CONTINUE
                 WHEN OTHER
                   CONTINUE
                 END-EVALUATE
             END-IF
           END-IF.
           PERFORM TEARDOWN.
           GOBACK.
       GETLINENUM.
           MOVE 1 TO AZ-LINE-J
           PERFORM VARYING AZ-LINE-I FROM AZ-LINE-BYTE BY 1
             UNTIL AZ-LINE-I > AZ-LINE-BYTE + 4
             MOVE ARG0-3(AZ-LINE-I) TO AZ-LINE-NUM-RD(AZ-LINE-J)
             ADD 1 TO AZ-LINE-J
           END-PERFORM
           EXIT.
       TEARDOWN.
           DISPLAY 'AZU0000I CICS_0E02_LGICDB01 END.'
           EXIT.
       END PROGRAM 'CICS_0E02_LGICDB01'.
      *+---------------------------------------------------------------+
      *| UNIT TEST FOR Z/OS: EXEC SQL SELECT_INTO                      |
      *|    FUNCTION CODE: 00E7                                        |
      *| TEST CASE VERSION: 202                                        |
      *+---------------------------------------------------------------+
       IDENTIFICATION DIVISION.
       PROGRAM-ID. 'DB2_00E7_LGICDB01'.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 BZ-ASSERT.
         03 MESSAGE-LEN PIC S9(4) COMP-4 VALUE 24.
         03 MESSAGE-TXT PIC X(254) VALUE 'HELLO FROM DB2 CALLBACK'.
       01  BZ-P1 PIC S9(9) COMP-4 VALUE 4.
       01  BZ-P2 PIC S9(9) COMP-4 VALUE 2001.
       01  BZ-P3 PIC X(3) VALUE 'AZU'.
       01 BZ-TRACE.
         03 TRACE-LEN       PIC S9(4) COMP-4 VALUE 5.
         03 TRACE-TXT       PIC X(254) VALUE 'TRACE'.
       01 BZUASSRT          PIC X(8) VALUE 'BZUASSRT'.
       01 BZUTRACE          PIC X(8) VALUE 'BZUTRACE'.
       01 AZ-TRACE-PTR      POINTER.
       01 AZ-TEST-LEN        PIC S9(8) COMP.
       01 AZ-RECORD.
         03 AZ-RECORD-COUNT-OT OCCURS 1 PIC 9(5) COMP-5 VALUE 0.
         03 AZ-RECORD-COUNT-IN OCCURS 1 PIC 9(5) COMP-5 VALUE 0.
         03 AZ-OUT-PARM-NUM  PIC 9(8).
         03 AZ-IN-PARM-NUM   PIC 9(8).
         03 AZ-STMT-NUM      PIC 9(9).
       01 AZ-GRP-INDEX       PIC 9(8).
       01 AZ-FLAG-IN         PIC 9(1).
       01 AZ-RECORD-PTR      POINTER.
       01 AZ-RC-WORK         PIC S9(4) USAGE BINARY.
       LOCAL-STORAGE SECTION.
       01 AZ-HOSTVAR-PTR     POINTER.
       01 AZ-HOSTVAR-PTR-ADDR
           REDEFINES AZ-HOSTVAR-PTR PIC 9(9) COMP-5.
       LINKAGE SECTION.
       01 AZ-TEST            PIC X(80).
       01 AZ-INFO-BLOCK.
          COPY EQAITERC.
       01 AZ-APLIST.
          COPY EQADB2CP.
       01 AZ-WK-RECORD-COUNT PIC 9(5) COMP-5.
       01 ARGO1.
          COPY EQADB2CV.
       01 ARGI1          .
          COPY EQADB2CV.
       01 ARGI2          .
          COPY EQADB2CV.
       01 ARGI3          .
          COPY EQADB2CV.
       01 ARGI4          .
          COPY EQADB2CV.
       01 ARGI5          .
          COPY EQADB2CV.
       01 ARGI6          .
          COPY EQADB2CV.
       01 ARGI7          .
          COPY EQADB2CV.
       01 ARGI8          .
          COPY EQADB2CV.
       01 ARGI9          .
          COPY EQADB2CV.
       01 AZ-SQLDA.
          COPY EQADB2CA.
       PROCEDURE DIVISION.
      * CHECK OUTPUT VALUE
      * DB2_INPT_00E7_LGICDB01.
           ENTRY 'DB2_INPT_00E7_LGICDB01' USING AZ-TEST
           AZ-INFO-BLOCK AZ-APLIST ARGO1.
           DISPLAY 'AZU0000I DB2_00E7_LGICDB01 CHECK VALUES...'
           MOVE 4 TO RETURN-CODE.
           MOVE SQL-STMT-NUM OF AZ-APLIST TO AZ-STMT-NUM
           SET ADDRESS OF AZ-SQLDA TO SQL-VPARMPTR
           MOVE SQLDA-NUM OF AZ-SQLDA TO AZ-OUT-PARM-NUM
           SET ADDRESS OF AZ-SQLDA TO SQL-APARMPTR
           MOVE SQLDA-NUM OF AZ-SQLDA TO AZ-IN-PARM-NUM
           MOVE 0 TO AZ-TEST-LEN.
           INSPECT AZ-TEST TALLYING AZ-TEST-LEN FOR
           CHARACTERS BEFORE INITIAL SPACE.
      * EXEC SQL SELECT_INTO : OUT=1 IN=9
           IF AZ-OUT-PARM-NUM = 1 AND
              AZ-IN-PARM-NUM = 9 THEN
             DISPLAY 'AZU0000I EXEC SQL SELECT_INTO'
              ' : OUT=' 1 ' IN=' 9
              ' L=' AZ-STMT-NUM
             MOVE 6 TO AZ-GRP-INDEX
             MOVE 0 TO AZ-FLAG-IN
             MOVE RETURN-CODE TO AZ-RC-WORK
             CALL 'GTMEMRC' USING TC-WORK-AREA OF AZ-INFO-BLOCK
               AZ-GRP-INDEX AZ-FLAG-IN AZ-RECORD-PTR
             SET ADDRESS OF AZ-WK-RECORD-COUNT TO AZ-RECORD-PTR
             MOVE AZ-RC-WORK TO RETURN-CODE
             ADD 1 TO AZ-WK-RECORD-COUNT
             MOVE AZ-WK-RECORD-COUNT TO AZ-RECORD-COUNT-OT(1)
             EVALUATE AZ-TEST(1:AZ-TEST-LEN)
               WHEN SPACE
                 CONTINUE
               WHEN OTHER
                 CONTINUE
             END-EVALUATE
           END-IF.
           PERFORM TEARDOWN.
           GOBACK.
      * SET INPUT VALUE
      * DB2_OUTP_00E7_LGICDB01.
           ENTRY 'DB2_OUTP_00E7_LGICDB01' USING AZ-TEST
           AZ-INFO-BLOCK AZ-APLIST ARGI1 ARGI2 ARGI3 ARGI4 ARGI5 ARGI6
           ARGI7 ARGI8 ARGI9.
           DISPLAY 'AZU0000I DB2_00E7_LGICDB01 INPUT VALUES...'
           MOVE 0 TO RETURN-CODE.
           MOVE SQL-STMT-NUM OF AZ-APLIST TO AZ-STMT-NUM
           SET ADDRESS OF AZ-SQLDA TO SQL-VPARMPTR
           MOVE SQLDA-NUM OF AZ-SQLDA TO AZ-OUT-PARM-NUM
           SET ADDRESS OF AZ-SQLDA TO SQL-APARMPTR
           MOVE SQLDA-NUM OF AZ-SQLDA TO AZ-IN-PARM-NUM
           MOVE 0 TO AZ-TEST-LEN.
           INSPECT AZ-TEST TALLYING AZ-TEST-LEN FOR
           CHARACTERS BEFORE INITIAL SPACE.
      * EXEC SQL SELECT_INTO : OUT=1 IN=9
           IF AZ-OUT-PARM-NUM = 1 AND
              AZ-IN-PARM-NUM = 9 THEN
             DISPLAY 'AZU0000I EXEC SQL SELECT_INTO'
              ' : OUT=' 1 ' IN=' 9
              ' L=' AZ-STMT-NUM
             MOVE 6 TO AZ-GRP-INDEX
             MOVE 1 TO AZ-FLAG-IN
             MOVE RETURN-CODE TO AZ-RC-WORK
             CALL 'GTMEMRC' USING TC-WORK-AREA OF AZ-INFO-BLOCK
               AZ-GRP-INDEX AZ-FLAG-IN AZ-RECORD-PTR
             SET ADDRESS OF AZ-WK-RECORD-COUNT TO AZ-RECORD-PTR
             MOVE AZ-RC-WORK TO RETURN-CODE
             ADD 1 TO AZ-WK-RECORD-COUNT
             MOVE AZ-WK-RECORD-COUNT TO AZ-RECORD-COUNT-IN(1)
             EVALUATE AZ-TEST(1:AZ-TEST-LEN)
               WHEN SPACE
                 CONTINUE
               WHEN OTHER
                 CONTINUE
             END-EVALUATE
           END-IF.
           PERFORM TEARDOWN.
           GOBACK.
       TEARDOWN.
           DISPLAY 'AZU0000I DB2_00E7_LGICDB01 END.'
           EXIT.
       END PROGRAM 'DB2_00E7_LGICDB01'.
